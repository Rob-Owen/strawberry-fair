{"version":3,"sources":["webpack:///./src/components/calendar/EventFilter.jsx","webpack:///./src/util/dates.js","webpack:///./src/components/MainTileWithTwoStackedSideTiles.jsx","webpack:///./src/components/NewsArticleSnapshots.jsx","webpack:///./src/templates/event-info.jsx","webpack:///./src/components/VerticalTileColumn.jsx","webpack:///./src/components/StrawberryCard.jsx","webpack:///./src/util/filters.js","webpack:///./src/util/generateScrapbookImageMap.js","webpack:///./src/components/home-page/ScrapbookImages.jsx","webpack:///./src/components/home-page/ContentBlocks.jsx","webpack:///./src/components/home-page/BaseBlock.jsx","webpack:///./src/components/home-page/CalendarBlock.jsx","webpack:///./src/components/home-page/NewsBlock.jsx","webpack:///./src/components/home-page/TwitterBlock.jsx","webpack:///./src/templates/home-page.jsx","webpack:///./src/components/calendar/EventType.js","webpack:///./src/components/calendar/Upcoming.jsx","webpack:///./src/components/calendar/getEventList.js"],"names":["EnabledFilterTag","name","remove","className","onClick","DisabledFilterTag","add","EventFilterBlock","filterProps","EventFilterTags","allFilters","activeFilters","addFilter","removeFilter","clearFilters","tags","filter","includes","push","key","filterEvents","events","eventFilters","event","every","eventType","frontmatter","eventTypes","areSameDay","date1","date2","daysMatch","getDate","monthsMatch","getMonth","yearsMatch","getFullYear","areSameMinute","minutesMatch","getMinutes","hoursMatch","getHours","isOnOrAfterDay","baseDate","testDate","basePureDate","toPureDate","getTime","dateTime","Date","MainTileWithTwoStackedSideTiles","mainTile","sideTopTile","sideBottomTile","displayStyle","day","month","year","NewsArticleSnapshot","newsArticles","publicationDate","node","date","imageInfo","_","get","image","to","fields","slug","PreviewCompatibleImage","style","width","title","toLocaleDateString","content","shortExcerpt","longExcerpt","NewsArticleSnapshots","newsArticleSnapshots","map","weekday","hour","minute","EventTypeList","EventInfo","contentComponent","Consumer","value","EventInfoWithContext","isPreview","BodyComponent","HTMLContent","Fragment","href","slice","download","generateEventSubtitle","data","dateTimeRange","markdownRemark","startDate","startDateTime","endDate","endDateTime","start","provideEnd","toLocaleTimeString","site","subtitle","query","VerticalTileColumn","props","children","SectionWithStrawberryCard","isPublic","imageAltText","text","StrawberryCard","StrawberryCardDesktop","src","alt","StrawberryCardMobile","StrawberryTiles","strawberryTiles","length","tileWrapper","index","strawberryTile","StrawberryTile","useFilters","filterList","useState","filters","setFilters","filterName","concat","sortByAspect","imageList","sort","a","b","getAspect","mapImagesToColumns","Error","combination","getRandInt","deepShuffle","outerColImgIndexes","innerColImgIndexes","imagesToRender","i","Math","random","pop","setColumnWidths","imageMap","innerColAspects","outer","inner","getInnerColAspect","adjustStartingWidths","widthPair","outerColWidths","innerColWidths","loopCounter","heights","relativeHeights","leftMax","max","rightMax","images","j","columnAspects","innerColMap","imgA","imgB","floor","shuffle","arr","shuffled","Array","isArray","nestedArr","useScrapbookLayout","setImageMap","useEffect","selectedImages","generateScrapbookImageMap","ScrapbookImages","ScrapbookImgs","outerCols","outerColMap","idx","position","OuterColumn","InnerColumn","img","ScrapbookImg","ContentBlock","contentTitle","contentSubtitle","scrapbookImages","ContentBlocks","contentBlocks","contentBlocksHtml","block","BaseBlock","altBackground","UpcomingEventsDisplay","previewEventList","UpcomingEventsDisplayWithContext","eventTypeList","getEventList","EventFilter","MoreEventsLinkBox","CalendarBlock","calendarBlock","NewsBlock","newsBlock","TwitterBlock","twitterBlock","data-height","data-dnt","HomePage","graphqlData","newsData","edges","tabTitle","EventMediaBlock","eventUrl","excerpt","EventPanelBlock","NoEventsFoundBlock","Upcoming","UpcomingWithContext","eventPanels","allMarkdownRemark","nodes","event1","event2","range1","range2","start1","start2","end1"],"mappings":"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","file":"component---src-templates-home-page-jsx-bcd0d85f0019ca51e004.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst EnabledFilterTag = ({name, remove}) => (\n    <a className=\"tag is-primary is-light\" onClick={remove}>{name}</a>\n)\n\nEnabledFilterTag.propTypes = {\n    name: PropTypes.string,\n    remove: PropTypes.func\n}\n\nconst DisabledFilterTag = ({name, add}) => (\n    <a className=\"tag\" onClick={add}>{name}</a>\n)\n\nDisabledFilterTag.propTypes = {\n    name: PropTypes.string,\n    add: PropTypes.func\n}\n\nexport const EventFilterBlock = ({filterProps}) => (\n    <div className=\"panel-block filter\">\n        <EventFilterTags filterProps={filterProps} />\n    </div>\n)\n\nexport const EventFilterTags = ({filterProps: {allFilters, activeFilters, addFilter, removeFilter, clearFilters}}) => {\n    // Construct array of tag objects\n    let tags = []\n    for (const filter of allFilters) {\n        if (activeFilters.includes(filter)) {\n            tags.push(<EnabledFilterTag key={filter} name={filter} remove={removeFilter(filter)} />)\n        } else {\n            tags.push(<DisabledFilterTag key={filter} name={filter} add={addFilter(filter)} />)\n        }\n    }\n\n    return (\n        <span className=\"tags\">\n            <span className=\"tag is-white\">Filters: </span>\n            {tags}\n            <a className=\"tag is-delete\" onClick={clearFilters} />\n        </span>\n    )\n}\n\nEventFilterTags.propTypes = {\n    filterProps: PropTypes.shape({\n        allFilters: PropTypes.arrayOf(PropTypes.string),\n        activeFilters: PropTypes.arrayOf(PropTypes.string),\n        addFilter: PropTypes.func.isRequired,\n        removeFilter: PropTypes.func.isRequired,\n        clearFilters: PropTypes.func.isRequired\n    })\n}\n\nEventFilterBlock.propTypes = EventFilterTags.propTypes\n\n// Function to filter a list of events based on a list of types.\n// We return only events for whom all types in the filter are present.\nexport const filterEvents = (events, eventFilters) => {\n    return events.filter(event => eventFilters.every(eventType => event.frontmatter.eventTypes.includes(eventType)))\n}\n","// Do two dateTimes occur on the same day?\nexport function areSameDay(date1, date2) {\n    const daysMatch = date1.getDate() === date2.getDate()           // Do the days (of the month) match?\n    const monthsMatch = date1.getMonth() === date2.getMonth()       // Do the months match?\n    const yearsMatch = date1.getFullYear() === date2.getFullYear()  // Do the years match?\n    return daysMatch && monthsMatch && yearsMatch                   // Then they render to the same day\n}\n\n// Do two dateTimes occur on the same minute? (Smallest meaningful resolution for events, we've decided)\nexport function areSameMinute(date1, date2) {\n    const minutesMatch = date1.getMinutes() === date2.getMinutes()\n    const hoursMatch = date1.getHours() === date2.getHours()\n    const daysMatch = date1.getDate() === date2.getDate()\n    const monthsMatch = date1.getMonth() === date2.getMonth()\n    const yearsMatch = date1.getFullYear() === date2.getFullYear()\n    return minutesMatch && hoursMatch && daysMatch && monthsMatch && yearsMatch\n}\n\n// Does this date occur on or after the given day?\n// Even if an event took place \"earlier today\", it will still show up\nexport function isOnOrAfterDay(baseDate, testDate) {\n    const basePureDate = toPureDate(baseDate)\n    const testPureDate = toPureDate(testDate)\n\n    return testPureDate.getTime() >= basePureDate.getTime()\n}\n\n// Removes the time part of a Date\nfunction toPureDate(dateTime) {\n    return new Date(dateTime.getFullYear(), dateTime.getMonth(), dateTime.getDate())\n}\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst MainTileWithTwoStackedSideTiles = ({mainTile, sideTopTile, sideBottomTile}) => (\r\n  <div className=\"tile is-ancestor\">\r\n    <div className=\"tile is-parent\">\r\n      <div className=\"tile is-child box main-box\">\r\n        {mainTile}\r\n      </div>\r\n    </div>\r\n    <div className=\"tile is-4 is-vertical is-parent small-box\">\r\n      <div className=\"tile is-child box small-box\">\r\n        {sideTopTile}  \r\n      </div>\r\n      <div className=\"tile is-child box small-box\">\r\n        {sideBottomTile}  \r\n      </div>\r\n    </div>\r\n  </div>\r\n)\r\n\r\nMainTileWithTwoStackedSideTiles.propTypes = {\r\n  mainTile: PropTypes.element,\r\n  sideTopTile: PropTypes.element,\r\n  sideBottomTile: PropTypes.element\r\n}\r\n\r\nexport default MainTileWithTwoStackedSideTiles\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'gatsby'\r\nimport _ from 'lodash'\r\n\r\nimport PreviewCompatibleImage from './PreviewCompatibleImage'\r\nimport MainTileWithTwoStackedSideTiles from './MainTileWithTwoStackedSideTiles'\r\nimport { newsArticleValidator } from './validators'\r\nimport { HTMLContent } from './Content'\r\n\r\n//display style of the event date\r\nexport const displayStyle = {\r\n  day: \"numeric\",\r\n  month: \"long\",\r\n  year: \"numeric\"\r\n}\r\n\r\nexport const NewsArticleSnapshot = ({newsArticles}) => {\r\n  const publicationDate = new Date(newsArticles.node.frontmatter.date)\r\n\r\n  const imageInfo = _.get(\r\n    newsArticles.node.frontmatter.image,\r\n    'srcNode.childImageSharp.fixedAspect',\r\n    newsArticles.node.frontmatter.image\r\n  )\r\n  const imageWrapperStyle = {\r\n    width: \"100%\"\r\n  }\r\n\r\n  return (\r\n    <article className=\"news-preview\">\r\n      <Link to={newsArticles.node.fields.slug}>\r\n        <PreviewCompatibleImage imageInfo={imageInfo} style={imageWrapperStyle} />\r\n        <h2 className=\"title is-5 news-snapshot-title\">{newsArticles.node.frontmatter.title}</h2>\r\n      </Link>\r\n      <h3 className=\"subtitle is-7\">{publicationDate.toLocaleDateString(\"en-GB\", displayStyle)}</h3>\r\n      <HTMLContent content={newsArticles.node.shortExcerpt} className=\"news-excerpt news-excerpt-short\" />\r\n      <HTMLContent content={newsArticles.node.longExcerpt} className=\"news-excerpt news-excerpt-long\" />\r\n  </article>\r\n  )\r\n}\r\n\r\nNewsArticleSnapshot.propTypes = {\r\n  newsArticles: newsArticleValidator\r\n}\r\n\r\nconst NewsArticleSnapshots = ({newsArticles}) => {\r\n  const newsArticleSnapshots = newsArticles.map(newsArticles => \r\n    <NewsArticleSnapshot \r\n      newsArticles={newsArticles}\r\n      key={newsArticles.node.fields.slug}\r\n    />\r\n  )\r\n\r\n  return (\r\n    <MainTileWithTwoStackedSideTiles \r\n      mainTile={newsArticleSnapshots[0]}\r\n      sideTopTile={newsArticleSnapshots[1]}\r\n      sideBottomTile={newsArticleSnapshots[2]}\r\n    />\r\n  )\r\n}\r\n\r\nNewsArticleSnapshots.propTypes = {\r\n  newsArticles: PropTypes.arrayOf(newsArticleValidator)\r\n}\r\n\r\nexport default NewsArticleSnapshots","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { graphql } from 'gatsby'\n\nimport PreviewCompatibleImage from '../components/PreviewCompatibleImage'\nimport { HTMLContent } from '../components/Content'\nimport { site } from '../util/templating'\nimport { areSameDay } from '../util/dates'\nimport { PreviewContext } from '../util/context'\n\n//display style of the event date\nexport const displayStyle = {\n    weekday: \"long\",\n    day: \"numeric\",\n    month: \"long\",\n    year: \"numeric\",\n    hour: \"2-digit\",\n    minute: \"2-digit\"\n}\n\n// List of types shown near top of event\nconst EventTypeList = ({eventTypes}) => {\n    if (eventTypes) {\n        return (\n            <div className=\"tags\">\n                {eventTypes.map(eventType => <span key={eventType} className=\"tag\">{eventType}</span>)}\n            </div>\n        )\n    } else {\n        return null\n    }\n}\n\nEventTypeList.propTypes = {\n    eventTypes: PropTypes.arrayOf(PropTypes.string)\n}\n\n// used by website and CMS previews\nexport const EventInfo = ({image, slug, eventTypes, content, contentComponent}) => (\n    <PreviewContext.Consumer>\n        {value => <EventInfoWithContext isPreview={value} image={image} slug={slug}\n        eventTypes={eventTypes} content={content} contentComponent={contentComponent} />}\n    </PreviewContext.Consumer>\n)\n\nconst EventInfoWithContext = ({isPreview, image, slug, eventTypes, content, contentComponent}) => {\n    const BodyComponent = contentComponent || HTMLContent\n\n    return (\n        <React.Fragment>\n            <EventTypeList eventTypes={eventTypes} />\n            {!isPreview && slug ? (\n                <a className=\"button event-download-button\" href={`/ics${slug.slice(0, -1)}.ics`} download>\n                    Add to Calendar\n                </a>\n            ) : null}\n            <BodyComponent content={content} />\n            <PreviewCompatibleImage imageInfo={image} />\n        </React.Fragment>\n    )\n}\n\nEventInfoWithContext.propTypes = {\n    isPreview: PropTypes.bool,\n    eventTypes: EventTypeList.propTypes.eventTypes,\n    image: PropTypes.object.isRequired,\n    content: PropTypes.string.isRequired,\n    contentComponent: PropTypes.elementType\n}\n\nEventInfo.propTypes = EventInfoWithContext.propTypes\n\nexport const generateEventSubtitle = (data) => {\n    const dateTimeRange = data.markdownRemark.frontmatter.dateTimeRange\n\n    const startDate = new Date(dateTimeRange.startDateTime)\n    const endDate = new Date(dateTimeRange.endDateTime)\n    const start = startDate.toLocaleDateString(\"en-GB\", displayStyle)\n\n    if (!dateTimeRange.provideEnd) {\n        return start\n    } else if (areSameDay(startDate, endDate)) {\n        return start + `–${endDate.toLocaleTimeString(\"en-GB\", {hour: \"2-digit\", minute: \"2-digit\"})}`\n    } else {\n        return start + ` – ${endDate.toLocaleDateString(\"en-GB\", displayStyle)}`\n    }\n    // This allows for events to go on overnight / over multiple days\n}\n\nexport default site(EventInfo, data => ({subtitle: generateEventSubtitle(data)}))\n\nexport const query = graphql`\nquery eventInfoTemplate($id: String!) {\n    markdownRemark(id: { eq: $id }) {\n        ...EventFragment\n    }\n    heroData: allMarkdownRemark(filter: {id: {eq: $id}}) {\n        ...HeroFragment\n    }\n}\n`","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst VerticalTileColumn = props => (\r\n  <div className=\"column is-narrow\">\r\n    <div className=\"tile is-ancestor\">\r\n      <div className=\"tile is-parent is-vertical\">\r\n        {props.children}\r\n      </div>\r\n    </div>\r\n  </div>\r\n)\r\n\r\nVerticalTileColumn.propTypes = {\r\n  children: PropTypes.node\r\n}\r\n\r\nexport default VerticalTileColumn\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport VerticalTileColumn from './VerticalTileColumn'\r\n\r\nconst defaultIcon = '/img/strawberry-icon.png'\r\nconst defaultImageAltText = 'Strawberry Icon'\r\n\r\nexport const SectionWithStrawberryCard = ({isPublic, image, imageAltText, text, children}) => {\r\n  // Formats a portion of text or other content alongside a strawberry card so it appears correctly\r\n  // and responsively\r\n\r\n  return (\r\n    <div className=\"columns\">\r\n      <div className=\"column\">\r\n        {children}\r\n      </div>\r\n      <div className=\"column is-narrow\">\r\n        {isPublic && <StrawberryCard image={image} imageAltText={imageAltText} text={text} />}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst StrawberryCard = ({image, imageAltText, text}) => {\r\n  return (\r\n    <React.Fragment>\r\n      <StrawberryCardDesktop image={image} imageAltText={imageAltText} text={text} />\r\n      <StrawberryCardMobile image={image} imageAltText={imageAltText} text={text} />\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nconst StrawberryCardDesktop = ({image, imageAltText, text}) => {\r\n  return (\r\n    <div className=\"box has-background-primary is-hidden-mobile strawberry-square\">\r\n      <figure className=\"image is-64x64\">\r\n        <img src={image || defaultIcon} alt={imageAltText || defaultImageAltText} />\r\n      </figure>\r\n      <p className=\"has-text-white\">{text}</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst StrawberryCardMobile = ({image, imageAltText, text}) => {\r\n  return (\r\n    <div className=\"box has-background-primary is-hidden-tablet\">\r\n      <div className=\"media\">\r\n        <figure className=\"media-left\">\r\n          <p className=\"image is-64x64\">\r\n            <img src={image || defaultIcon} alt={imageAltText || defaultImageAltText} />\r\n          </p>\r\n        </figure>\r\n        <div className=\"media-content\">\r\n          <p className=\"has-text-white\">{text}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const StrawberryTiles = ({strawberryTiles}) => {\r\n  if (strawberryTiles && strawberryTiles.length > 0) {\r\n    return (\r\n      <VerticalTileColumn>\r\n        {strawberryTiles.map((tileWrapper, index) => \r\n          tileWrapper.strawberryTile.isPublic && <StrawberryTile text={tileWrapper.strawberryTile.text} key={index}/>)}\r\n      </VerticalTileColumn>\r\n    )\r\n  } else {\r\n    return null\r\n  }\r\n}\r\n\r\nconst StrawberryTile = ({isPublic, image, imageAltText, text}) => (\r\n  <div className=\"tile is-child\">\r\n    <StrawberryCard isPublic={isPublic} image={image} imageAltText={imageAltText} text={text} />\r\n  </div>\r\n)\r\n\r\nStrawberryCard.propTypes = {\r\n  image: PropTypes.string,\r\n  imageAltText: PropTypes.string,\r\n  text: PropTypes.string\r\n}\r\n\r\nSectionWithStrawberryCard.propTypes = {\r\n  isPublic: PropTypes.bool.isRequired,\r\n  image: PropTypes.string,\r\n  imageAltText: PropTypes.string,\r\n  text: PropTypes.string,\r\n  children: PropTypes.element\r\n}\r\n\r\nStrawberryCardDesktop.propTypes = StrawberryCard.propTypes\r\nStrawberryCardMobile.propTypes = StrawberryCard.propTypes\r\nStrawberryTile.propTypes = StrawberryCard.propTypes\r\n\r\nStrawberryTiles.propTypes = { \r\n  strawberryTiles: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      strawberryTile: PropTypes.shape(\r\n        Object.assign({isPublic: PropTypes.bool.isRequired}, StrawberryCard.PropTypes)\r\n      )\r\n    })\r\n  )\r\n}\r\n","import { useState } from 'react'\n\nexport const useFilters = (filterList) => {\n    const [filters, setFilters] = useState([])\n\n    const addFilter = (filterName) => (\n        () => {setFilters(filters.concat(filterName))}\n    )\n\n    const removeFilter = (filterName) => (\n        () => {setFilters(filters.filter(name => name !== filterName))}\n    )\n\n    const clearFilters = () => {\n        setFilters([])\n    }\n\n    return {\n        allFilters: filterList,\n        activeFilters: filters,\n        addFilter: addFilter,\n        removeFilter: removeFilter,\n        clearFilters: clearFilters\n    }\n}\n","import _ from 'lodash'\n\n/* LAYOUT CONTROL CONSTANTS */\n\n/** Min height difference ratio between the shortest and tallest inner column (to minimise white space) - must be a num between 0 and 1 */\nconst minInnerColHeightDiffRatio = 0.6\nconst minOuterColHeightDiffRatio = 0.8\n/** Min Bulma height of an inner column - must be an int between 1 and 6 */\nconst minInnerColWidth = 4\n\n\n/* IMAGE HANDLING FUNCTIONS */\n\n/** Returns 3-dimensional array representing Bulma column structure of ScrapbookImages component */\nexport const generateScrapbookImageMap = (images, isPreview) => {\n    // In CMS preview, aspect ratios are ignored and images are not stacked\n    const imageList = sortByAspect(images)\n    let imageMap = mapImagesToColumns(imageList, isPreview)\n    return setColumnWidths(imageMap)\n}\n\nconst sortByAspect = (imageList) => imageList.sort((a, b) => getAspect(a) - getAspect(b))\n\n/** Returns a randomised map of images */\nconst mapImagesToColumns = (imageList, isPreview=false) => {\n    if (!imageList || imageList.length === 0) {\n        throw new Error(\"No images passed to generateScrapbookImageMap()\")\n    }\n    if (imageList.length !== 6) {\n        throw new Error(\"Wrong number of images passed to generateScrapbookImageMap(): must receive exactly 6 images\")\n    }\n\n    // Chosen to ensure aspects are evenly balanced\n    const possibleCombinations = [\n        [ [[0], [2, 5]], [[1], [3, 4]] ],\n        [ [[0], [3, 4]], [[1], [2, 5]] ],\n        [ [[0], [3, 5]], [[1], [2, 4]] ]\n    ]\n\n    const combination = possibleCombinations[getRandInt(3)]\n    const permutation = deepShuffle(combination)\n\n    return permutation.map((outerColImgIndexes) => {\n        return outerColImgIndexes.map((innerColImgIndexes) => {\n            \n            const imagesToRender = innerColImgIndexes.map((i) => imageList[i])\n            \n            // Randomly determine whether to render 1 or 2 images in innerCol where necessary\n            if (innerColImgIndexes.length === 2 && (isPreview || Math.random() < 0.5)) {\n                imagesToRender.pop()\n            }\n\n            return imagesToRender\n        })\n    })\n}\n\nconst setColumnWidths = (imageMap) => {\n    const innerColAspects = imageMap.map(outer => outer.map(inner => getInnerColAspect(inner)))\n\n    const adjustStartingWidths = widthPair => {\n        switch (getRandInt(3)) {\n            case 1:\n                widthPair[0]++\n                widthPair[1]--\n                break;\n            case 2:\n                widthPair[0]--\n                widthPair[1]++\n                break;\n            default:\n                break;\n        }\n    }\n\n    // Initial bulma column width estimates - these may be adjusted\n    const outerColWidths = [6, 6]\n    const innerColWidths = [[6, 6], [6, 6]]\n\n    // Randomise them a little to begin\n    adjustStartingWidths(outerColWidths)\n    adjustStartingWidths(innerColWidths[0])\n    adjustStartingWidths(innerColWidths[1])\n\n    // max number of loop iterations expected. \n    // This guards against an infinite loop cause by incorrect setting of the height limit ratios\n    // this should never happen, but we guard against it anyway\n    let loopCounter = 18\n\n    // iteratively adjust column heights.\n    // For CMS previews we have no aspect ratio information so skip this step.\n    while(loopCounter-- > 0) {\n        const heights = relativeHeights(innerColAspects, innerColWidths, outerColWidths)\n\n        // balance the left inner column heights\n        if (heights[0][0] / heights[0][1] < minInnerColHeightDiffRatio && innerColWidths[0][1] > minInnerColWidth) {\n            innerColWidths[0][0]++\n            innerColWidths[0][1]--\n            continue\n        }\n        if (heights[0][1] / heights[0][0] < minInnerColHeightDiffRatio && innerColWidths[0][0] > minInnerColWidth) {\n            innerColWidths[0][0]--\n            innerColWidths[0][1]++\n            continue\n        }\n\n        // balance the right inner column heights\n        if (heights[1][0] / heights[1][1] < minInnerColHeightDiffRatio && innerColWidths[1][1] > minInnerColWidth) {\n            innerColWidths[1][0]++\n            innerColWidths[1][1]--\n            continue\n        }\n        if (heights[1][1] / heights[1][0] < minInnerColHeightDiffRatio && innerColWidths[1][0] > minInnerColWidth) {\n            innerColWidths[1][0]--\n            innerColWidths[1][1]++\n            continue\n        }\n\n        // balance the outer column heights based on max innner column heights\n        const leftMax = Math.max(...heights[0])\n        const rightMax = Math.max(...heights[1])\n        if (leftMax / rightMax < minOuterColHeightDiffRatio && outerColWidths[1] > minInnerColWidth) {\n            outerColWidths[0]++\n            outerColWidths[1]--\n            continue\n        }\n        if (leftMax / rightMax > 1 / minOuterColHeightDiffRatio && outerColWidths[0] > minInnerColWidth) {\n            outerColWidths[0]--\n            outerColWidths[1]++\n            continue\n        }\n\n        // at this point column widths have been adjusted\n        // to approximately balance column height\n        break;\n    }\n\n    return imageMap.map((outer, i) => {\n        return { \n            width: `is-${outerColWidths[i]}`, \n            images: outer.map((inner, j) => {\n                return { width: `is-${innerColWidths[i][j]}`, images: inner }\n            })\n        }\n    })\n}\n\nconst relativeHeights = (columnAspects, innerColWidths, outerColWidths) => {\n    return columnAspects.map((outer, i) => outer.map((inner, j) => outerColWidths[i] * innerColWidths[i][j] / inner))\n}\n\n//** Tries to get the aspect ratio of an image. Aspect ratio is unavailable for CMS previews */\nconst getAspect = (image) => _.get(image, 'srcNode.childImageSharp.fluid.aspectRatio', 1)\n\n/** Returns the combined aspect ratio of two images stacked on top of each other */\nconst getStackedAspect = (imgA, imgB) => (getAspect(imgA) * getAspect(imgB)) / (getAspect(imgA) + getAspect(imgB))\n\nconst getInnerColAspect = (innerColMap) => (innerColMap.length === 1 ? getAspect(innerColMap[0]) : getStackedAspect(innerColMap[0], innerColMap[1]))\n\n/* RANDOMISATION FUNCTIONS */\n\n/** Returns 0 <= randInt < max */\nconst getRandInt = (max) => Math.floor(Math.random() * max)\n\nexport const shuffle = (arr) => {\n    const shuffled = [...arr]\n    for (let i = shuffled.length - 1; i > 0; i--) {\n        const j = getRandInt(i + 1);\n        [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]]\n    }\n    return shuffled\n}\n\nconst deepShuffle = (arr) => {\n    if (Array.isArray(arr[0])) {\n        const shuffled = arr.map((nestedArr) => deepShuffle(nestedArr))\n        return shuffle(shuffled)\n    }\n    else {\n        return shuffle(arr)\n    }\n}","import React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\n\nimport { childImageSharpValidator, previewCompatibleImageValidator } from '../validators'\nimport PreviewCompatibleImage from '../PreviewCompatibleImage'\nimport { generateScrapbookImageMap, shuffle } from '../../util/generateScrapbookImageMap'\nimport { PreviewContext } from '../../util/context'\n\nconst useScrapbookLayout = (images, isPreview) => {\n    const [imageMap, setImageMap] = useState(null)\n\n    useEffect(() => {\n        const selectedImages = shuffle(images).slice(0, 6)\n        setImageMap(generateScrapbookImageMap(selectedImages, isPreview))\n    }, [images])\n\n    return imageMap\n}\n\n/** Expects an array of at least 6 images */\nexport const ScrapbookImages = ({images}) => (\n    <PreviewContext.Consumer>\n        {value => <ScrapbookImgs images={images} isPreview={value} />}\n    </PreviewContext.Consumer>\n)\n\n\nconst ScrapbookImgs = ({images, isPreview}) => {\n    const imageMap = useScrapbookLayout(images, isPreview)\n\n    if (imageMap === null) {\n        return null\n    }\n\n    const outerCols = imageMap.map((outerColMap, idx) => (\n        <OuterColumn\n                outerColMap={outerColMap}\n                position={(idx === 0 ? \"left-top\" : \"right-bottom\")}\n                key={idx} />\n    ))\n\n    return (\n        <div className=\"columns scrapbook-columns\">\n            {outerCols}\n        </div>\n    )\n}\n\nconst OuterColumn = ({outerColMap: {width, images}, position}) => (\n    <div className={`column scrapbook-column outer-column ${width} ${position}`}>\n        <div className=\"columns scrapbook-columns is-mobile\">\n            {images.map((innerColMap, idx) => <InnerColumn innerColMap={innerColMap}\n                                                                position={position}\n                                                                key={idx} />)}\n        </div>\n    </div>\n)\n\nconst InnerColumn = ({innerColMap: {width, images}, position}) => (\n    <div className={`column scrapbook-column inner-column ${width} ${position}`}>\n        <div className = \"columns scrapbook-columns is-multiline\">\n            {images.map((img, idx) => <ScrapbookImg image={img} key={idx} />)}\n        </div>\n    </div>\n)\n\nconst ScrapbookImg = ({image}) => {\n    return (\n        <div className=\"column scrapbook-column is-full\">\n            <PreviewCompatibleImage imageInfo={image} />\n        </div>\n    )\n}\n\nScrapbookImg.propTypes = {\n    image: previewCompatibleImageValidator\n}\n\nInnerColumn.propTypes = { \n    innerColMap: PropTypes.shape({\n        width: PropTypes.string,\n        images: PropTypes.arrayOf(previewCompatibleImageValidator),\n    }),\n    position: PropTypes.string\n}\n\nOuterColumn.propTypes = {\n    outerColMap: PropTypes.shape({\n        width: PropTypes.string,\n        images: PropTypes.arrayOf(InnerColumn.propTypes.innerColMap)\n    }),\n    position: PropTypes.string\n}\n\nScrapbookImgs.propTypes = {\n    images: PropTypes.arrayOf(childImageSharpValidator),\n    isPreview: PropTypes.bool\n}\n\nScrapbookImages.propTypes = { images: ScrapbookImgs.propTypes.images }","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { ScrapbookImages } from './ScrapbookImages'\r\nimport { SectionWithStrawberryCard } from '../StrawberryCard'\r\n\r\nconst ContentBlock = ({contentTitle, contentSubtitle, scrapbookImages, content, strawberryTile, BodyComponent}) => (\r\n  <section className=\"section home-page-section\">\r\n    <ScrapbookImages images={scrapbookImages}/>\r\n    <h1 className=\"title is-1\">{contentTitle}</h1>\r\n    <div className=\"columns\">\r\n      <div className=\"column is-three-fifths\">\r\n        <h3 className=\"subtitle is-5\">{contentSubtitle}</h3>\r\n      </div>\r\n    </div>\r\n    <SectionWithStrawberryCard isPublic={strawberryTile.isPublic} text={strawberryTile.text}>\r\n      <BodyComponent content={content}/>\r\n    </SectionWithStrawberryCard>\r\n  </section>\r\n)\r\n\r\nContentBlock.propTypes = {\r\n  contentTitle: PropTypes.node,\r\n  contentSubtitle: PropTypes.node,\r\n  scrapbookImages: ScrapbookImages.propTypes.images,\r\n  content: PropTypes.node,\r\n  strawberryTile: PropTypes.shape({\r\n    isPublic: PropTypes.bool,\r\n    text: PropTypes.string\r\n  }),\r\n  BodyComponent: PropTypes.elementType\r\n}\r\n\r\nconst ContentBlocks = ({contentBlocks, contentBlocksHtml, BodyComponent}) => (\r\n  <React.Fragment>\r\n    {contentBlocks && contentBlocks.map((block, index) => (\r\n        <ContentBlock \r\n          contentTitle={block.title}\r\n          contentSubtitle={block.subtitle}\r\n          scrapbookImages={block.scrapbookImages || []}\r\n          content={contentBlocksHtml[index]}\r\n          strawberryTile={block.strawberryTile}\r\n          BodyComponent={BodyComponent}\r\n          key={index}\r\n        />\r\n      )\r\n    )}\r\n  </React.Fragment>\r\n)\r\n\r\nContentBlocks.propTypes = {\r\n  contentBlocks: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      title: ContentBlock.propTypes.contentTitle,\r\n      subtitle: ContentBlock.propTypes.contentSubtitle,\r\n      scrapbookImages: ContentBlock.propTypes.scrapbookImages,\r\n      strawberryTile: ContentBlock.propTypes.strawberryTile,\r\n      BodyComponent: PropTypes.elementType\r\n    })\r\n  ),\r\n  contentBlocksHtml: PropTypes.arrayOf(PropTypes.string),\r\n  BodyComponent: PropTypes.elementType\r\n}\r\n\r\nexport default ContentBlocks\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst BaseBlock = ({block, altBackground = \"\", children}) => (\r\n    <div className={`home-page-section ${altBackground && \"has-background-light-grey is-viewport-width\"}`}>\r\n      <section className={`section ${altBackground && \"section-root\"}`}>\r\n        <div className=\"container\">\r\n            <h1 className=\"title\">{block.title}</h1>\r\n            <div className=\"columns\">\r\n              <div className=\"column is-three-fifths\">\r\n                <h3 className=\"subtitle\">{block.subtitle}</h3>\r\n              </div>\r\n            </div>\r\n            {children}\r\n        </div>\r\n    </section>\r\n  </div>\r\n)\r\n\r\nBaseBlock.propTypes = {\r\n  block: PropTypes.shape({\r\n    title: PropTypes.node,\r\n    subtitle: PropTypes.node\r\n  }),\r\n  altBackground: PropTypes.bool,\r\n  children: PropTypes.node\r\n}\r\n\r\nexport default BaseBlock\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'gatsby'\r\n\r\nimport BaseBlock from './BaseBlock'\r\nimport { getEventList } from '../calendar/getEventList'\r\nimport { EventMediaBlock } from '../calendar/Upcoming'\r\nimport { eventPropTypeValidator } from '../validators'\r\nimport { EventFilterTags, filterEvents } from '../calendar/EventFilter'\r\nimport { eventTypeList } from '../calendar/EventType'\r\nimport { PreviewContext } from '../../util/context'\r\nimport { useFilters } from '../../util/filters'\r\nimport { isOnOrAfterDay } from '../../util/dates'\r\n\r\nconst CalendarBlock = ({calendarBlock, events}) => (\r\n  <BaseBlock block={calendarBlock} altBackground={true}>\r\n    <UpcomingEventsDisplay events={events} />\r\n  </BaseBlock>\r\n)\r\n\r\nconst UpcomingEventsDisplay = ({events}) => (\r\n  <PreviewContext.Consumer>\r\n    {value => <UpcomingEventsDisplayWithContext isPreview={value} previewEventList={events} />}\r\n  </PreviewContext.Consumer>\r\n)\r\n\r\nconst UpcomingEventsDisplayWithContext = ({isPreview, previewEventList}) => {\r\n  const filterProps = useFilters(eventTypeList)\r\n\r\n  let events = isPreview ? previewEventList : getEventList()\r\n  events = events.filter(event => isOnOrAfterDay(new Date(), new Date(event.frontmatter.dateTimeRange.provideEnd ? event.frontmatter.dateTimeRange.endDateTime : event.frontmatter.dateTimeRange.startDateTime)))\r\n  \r\n  return (\r\n    <React.Fragment>\r\n      <EventFilterTags filterProps={filterProps} />\r\n      <div className=\"columns is-multiline\">\r\n        {filterEvents(events, filterProps.activeFilters)\r\n          .map(event => (\r\n            <div className=\"column is-half\" key={event.fields.slug}>\r\n              <div className=\"box\">\r\n                <EventMediaBlock event={event} />\r\n              </div>\r\n            </div>\r\n            )\r\n          ).slice(0, 4)  // Only take the first 4 events\r\n        }\r\n        <MoreEventsLinkBox />\r\n      </div>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nconst MoreEventsLinkBox = () => (\r\n  <div className=\"column is-half\">\r\n    <Link className=\"box button\" to=\"/events\">See more events...</Link>\r\n  </div>\r\n)\r\n\r\nCalendarBlock.propTypes = {\r\n  calendarBlock: BaseBlock.propTypes.block,\r\n  events: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n        node: eventPropTypeValidator\r\n    })\r\n)\r\n}\r\n\r\nUpcomingEventsDisplay.propTypes = {\r\n  events: CalendarBlock.propTypes.events\r\n}\r\n\r\nUpcomingEventsDisplayWithContext.propTypes = {\r\n  isPreview: PropTypes.bool.isRequired,\r\n  previewEventList: UpcomingEventsDisplay.propTypes.events\r\n}\r\n\r\nexport default CalendarBlock\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport NewsArticleSnapshots from '../NewsArticleSnapshots'\r\nimport BaseBlock from './BaseBlock'\r\n\r\nconst NewsBlock = ({newsBlock, newsArticles}) => (\r\n  <BaseBlock block={newsBlock}>\r\n    <div className=\"columns\">\r\n      <NewsArticleSnapshots newsArticles={newsArticles || \"Hello\"}/>\r\n    </div>\r\n  </BaseBlock>\r\n)\r\n\r\nNewsBlock.propTypes = {\r\n  newsBlock: BaseBlock.propTypes.block,  // Reuse same validator\r\n  newsArticles: PropTypes.oneOfType([\r\n    NewsArticleSnapshots.propTypes.newsArticles,  // Reuse validator\r\n    PropTypes.string  // Placeholder \"Hello\"\r\n  ])\r\n}\r\n\r\nexport default NewsBlock\r\n","import React from 'react'\r\n\r\nimport BaseBlock from './BaseBlock'\r\n\r\nconst TwitterBlock = ({twitterBlock}) => (\r\n  <BaseBlock block={twitterBlock}>\r\n    <div className=\"columns is-centered\">\r\n      <div className=\"column is-9\">\r\n        <a className=\"twitter-timeline\" data-height=\"700\" data-dnt=\"true\" href=\"https://twitter.com/strawberry_fair\">\r\n          Tweets by Strawberry Fair\r\n        </a>\r\n      </div>\r\n    </div>\r\n  </BaseBlock>\r\n)\r\n\r\nTwitterBlock.propTypes = {\r\n  twitterBlock: BaseBlock.propTypes.block\r\n}\r\n\r\nexport default TwitterBlock\r\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { graphql } from 'gatsby'\n\nimport { HTMLContent } from '../components/Content'\n\nimport ContentBlocks from '../components/home-page/ContentBlocks'\nimport CalendarBlock from '../components/home-page/CalendarBlock'\nimport NewsBlock from '../components/home-page/NewsBlock'\nimport TwitterBlock from '../components/home-page/TwitterBlock'\n\nimport { site } from '../util/templating'\n\n// This is used by the website and for CMS previews\nexport const HomePage = ({contentBlocks, contentBlocksHtml, calendarBlock, events, newsBlock, newsArticles, twitterBlock, contentComponent}) => {\n    const BodyComponent = contentComponent || HTMLContent\n\n    return (\n      <React.Fragment>\n        <ContentBlocks \n          contentBlocks={contentBlocks}\n          contentBlocksHtml={contentBlocksHtml}\n          BodyComponent={BodyComponent}/>\n        <CalendarBlock calendarBlock={calendarBlock} events={events} />\n        <NewsBlock newsBlock={newsBlock} newsArticles={newsArticles}/>\n        <TwitterBlock twitterBlock={twitterBlock}/>\n        {\n          // TODO: Finish committee meeting calendars\n          // TODO: Finish News overview\n          // TODO: Finish Twitter integration\n        }\n      </React.Fragment>\n  )\n}\n\nHomePage.propTypes = {\n  contentBlocks: ContentBlocks.propTypes.contentBlocks,\n  contentBlocksHtml: ContentBlocks.propTypes.contentBlocksHtml,\n  calendarBlock: CalendarBlock.propTypes.calendarBlock,\n  events: CalendarBlock.propTypes.events,\n  newsBlock: NewsBlock.propTypes.newsBlock,\n  newsArticles: NewsBlock.propTypes.newsArticles,\n  twitterBlock: TwitterBlock.propTypes.twitterBlock,\n  contentComponent: PropTypes.elementType,\n}\n\nconst additionalPropsExtractor = graphqlData => ({\n  contentBlocksHtml: graphqlData.markdownRemark.fields.contentBlocksHtml,\n  newsArticles: graphqlData.newsData.edges,\n  tabTitle: 'Strawberry Fair'\n})\n\nexport default site(HomePage, additionalPropsExtractor)\n\n\nexport const query = graphql`\nquery homePageTemplate($id: String!) {\n    markdownRemark(id: { eq: $id }) {\n      frontmatter {\n        title\n        contentBlocks {\n          title\n          subtitle\n          scrapbookImages {\n            alt\n            srcNode {\n              childImageSharp {\n                fluid {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n          strawberryTile {\n            isPublic\n            text\n          }\n        }\n        calendarBlock {\n          title\n          subtitle\n        }\n        newsBlock {\n          title\n          subtitle\n        }\n        twitterBlock {\n          title\n          subtitle\n        }\n      }\n      fields {\n        contentBlocksHtml\n      }\n      html\n    }\n    newsData: allMarkdownRemark(filter: {frontmatter: {templateKey: {eq: \"news-article\"}}}, sort: {fields: frontmatter___date, order: DESC}) {\n      edges {\n        node {\n          ...NewsFragment\n        }\n      }\n    }\n    heroData: allMarkdownRemark(filter: {id: {eq: $id}}) {\n      ...HeroFragment\n    }\n  }\n`\n\n","// List of allowed event types.\n// IF YOU UPDATE THIS LIST MAKE SURE YOU ALSO UPDATE THE LIST IN static/admin/config.yml\n// THEY MUST ALWAYS BE IDENTICAL\nexport const eventTypeList = [\n    'Benefit gig',\n    'Meeting - Programming',\n    'Meeting - Finance',\n    'Band competition',\n    'Other',\n]\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'gatsby'\nimport _ from 'lodash'\n\nimport { HTMLContentSmall } from '../Content'\nimport { eventPropTypeValidator } from '../validators'\nimport { EventFilterBlock, filterEvents } from './EventFilter'\nimport { eventTypeList } from './EventType'\nimport { getEventList } from './getEventList'\nimport { PreviewContext } from '../../util/context'\nimport { useFilters } from '../../util/filters'\nimport { isOnOrAfterDay } from '../../util/dates'\nimport { generateEventSubtitle } from '../../templates/event-info'\n\nexport const EventMediaBlock = ({event}) => {\n    const eventUrl = event.fields.slug\n\n    return (\n    <div className=\"media event\">\n        <div className=\"media-left\">\n            <Link to={eventUrl} className=\"image is-64x64\">\n                {event.frontmatter.image ? <img src={_.get(event.frontmatter.image, 'srcNode.childImageSharp.resize.src', event.frontmatter.image.src)}\n                                                alt={event.frontmatter.image.alt} /> : null}\n            </Link>\n        </div>\n        <div className=\"media-content\">\n            <Link to={eventUrl}>\n                <h2 className=\"title is-4\"><strong>{event.frontmatter.title}</strong></h2>\n                <h3 className=\"subtitle is-5\">{generateEventSubtitle({markdownRemark: event})}</h3>\n            </Link>\n            <HTMLContentSmall className=\"add-margin-top\" content={event.excerpt} />\n        </div>\n    </div>\n    )\n}\n\nconst EventPanelBlock = ({event}) => {\n    return (\n        <div className=\"panel-block\">\n            <EventMediaBlock event={event} />\n        </div>\n    )\n}\n\nconst NoEventsFoundBlock = () => (\n    <div className=\"panel-block\">\n        <div className=\"media\">\n            <div className=\"media-content\">\n                <p><strong>No events match the selected filters.</strong></p>\n            </div>\n        </div>\n    </div>\n)\n\nexport const Upcoming = ({events}) => (  // 'events' is only used if it is a preview, otherwise it uses a static query\n    <PreviewContext.Consumer>\n        {value => <UpcomingWithContext isPreview={value} previewEventList={events} />}\n    </PreviewContext.Consumer>\n)\n\nconst UpcomingWithContext = ({isPreview, previewEventList}) => {\n    const filterProps = useFilters(eventTypeList)\n\n    // Get list of events occurring today or later\n    let events = isPreview ? previewEventList : getEventList()\n    events = events.filter(event => isOnOrAfterDay(new Date(), new Date(event.frontmatter.dateTimeRange.provideEnd ? event.frontmatter.dateTimeRange.endDateTime : event.frontmatter.dateTimeRange.startDateTime)))\n\n    const maxItems = 5\n\n    // Construct array of list elements\n    let eventPanels = filterEvents(events, filterProps.activeFilters).slice(0, maxItems).map(event => <EventPanelBlock key={event.frontmatter.title} event={event} />)\n\n    return (\n        <React.Fragment>\n            <h1 className=\"title\">Upcoming Events</h1>\n            <div className=\"upcoming panel\">\n                <EventFilterBlock filterProps={filterProps} />\n                {eventPanels.length > 0 ? eventPanels : <NoEventsFoundBlock />}\n            </div>\n        </React.Fragment>\n    )\n}\n\nEventMediaBlock.propTypes = {\n    event: eventPropTypeValidator\n}\n\nEventPanelBlock.propTypes = {\n    event: EventMediaBlock.propTypes.event\n}\n\nUpcoming.propTypes = {\n    events: PropTypes.arrayOf(\n        PropTypes.shape({\n            node: eventPropTypeValidator\n        })\n    )\n}\n\nUpcomingWithContext.propTypes = {\n    isPreview: PropTypes.bool.isRequired,\n    previewEventList: Upcoming.propTypes.events\n}\n","import { useStaticQuery, graphql } from 'gatsby'\n\nimport { areSameMinute } from '../../util/dates'\n\nexport const getEventList = () => {\n  const { allMarkdownRemark } = useStaticQuery(graphql`\n  query eventList {\n      allMarkdownRemark(filter: {frontmatter: {templateKey: {eq: \"event-info\"}}}, sort: {fields: frontmatter___dateTimeRange___startDateTime, order: ASC}) {\n          nodes {\n              ...EventFragment\n          }\n      }\n  }\n  `)\n\n  // Already started by start time, but if two events start at the same time, we want to sort then by the end time (if provided).\n  const nodesSorted = allMarkdownRemark.nodes.sort((event1, event2) => {\n    const range1 = event1.frontmatter.dateTimeRange\n    const range2 = event2.frontmatter.dateTimeRange\n    const start1 = new Date(range1.startDateTime)\n    const start2 = new Date(range2.startDateTime)\n\n    // Only need to do anything if they start at the same time\n    if (areSameMinute(start1, start2)) {\n      // Four cases, for each combination of each providing or not providing an end time.\n      // We'll deal with them all.\n      if (range1.provideEnd) {\n        const end1 = new Date(range1.endDateTime)\n\n        if (range2.provideEnd) {\n          const end2 = new Date(range2.endDateTime)\n          // Both ends provided, so sort by end date\n          return end1 - end2\n        } else {\n          // Range 2 has no defined end time, so ends first\n          return 1\n        }\n      } else {\n        if (range2.provideEnd) {\n          // Range 1 has no defined end time, so ends first\n          return -1\n        } else {\n          // Neither have a defined end, so they occur at the same time\n          return 0\n        }\n      }\n    } else {\n      // Leave in current order\n      return 0\n    }\n  })\n\n  return nodesSorted\n}\n"],"sourceRoot":""}