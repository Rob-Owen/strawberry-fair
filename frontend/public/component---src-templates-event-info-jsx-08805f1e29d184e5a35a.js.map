{"version":3,"sources":["webpack:///./src/util/dates.js","webpack:///./src/templates/event-info.jsx"],"names":["areSameDay","date1","date2","daysMatch","getDate","monthsMatch","getMonth","yearsMatch","getFullYear","areSameMinute","minutesMatch","getMinutes","hoursMatch","getHours","isOnOrAfterDay","baseDate","testDate","basePureDate","toPureDate","getTime","dateTime","Date","displayStyle","weekday","day","month","year","hour","minute","EventTypeList","eventTypes","className","map","eventType","key","EventInfo","image","slug","content","contentComponent","Consumer","value","EventInfoWithContext","isPreview","BodyComponent","HTMLContent","Fragment","href","slice","download","imageInfo","generateEventSubtitle","data","dateTimeRange","markdownRemark","frontmatter","startDate","startDateTime","endDate","endDateTime","start","toLocaleDateString","provideEnd","toLocaleTimeString","site","subtitle","query"],"mappings":"6FACO,SAASA,EAAWC,EAAOC,GAC9B,IAAMC,EAAYF,EAAMG,YAAcF,EAAME,UACtCC,EAAcJ,EAAMK,aAAeJ,EAAMI,WACzCC,EAAaN,EAAMO,gBAAkBN,EAAMM,cACjD,OAAOL,GAAaE,GAAeE,EAIhC,SAASE,EAAcR,EAAOC,GACjC,IAAMQ,EAAeT,EAAMU,eAAiBT,EAAMS,aAC5CC,EAAaX,EAAMY,aAAeX,EAAMW,WACxCV,EAAYF,EAAMG,YAAcF,EAAME,UACtCC,EAAcJ,EAAMK,aAAeJ,EAAMI,WACzCC,EAAaN,EAAMO,gBAAkBN,EAAMM,cACjD,OAAOE,GAAgBE,GAAcT,GAAaE,GAAeE,EAK9D,SAASO,EAAeC,EAAUC,GACrC,IAAMC,EAAeC,EAAWH,GAGhC,OAFqBG,EAAWF,GAEZG,WAAaF,EAAaE,UAIlD,SAASD,EAAWE,GAChB,OAAO,IAAIC,KAAKD,EAASZ,cAAeY,EAASd,WAAYc,EAAShB,WA7B1E,uG,kCCAA,+QAWakB,EAAe,CACxBC,QAAS,OACTC,IAAK,UACLC,MAAO,OACPC,KAAM,UACNC,KAAM,UACNC,OAAQ,WAINC,EAAgB,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,WACpB,OAAIA,EAEI,yBAAKC,UAAU,QACVD,EAAWE,KAAI,SAAAC,GAAS,OAAI,0BAAMC,IAAKD,EAAWF,UAAU,OAAOE,OAIrE,MASFE,EAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAOC,EAAT,EAASA,KAAMP,EAAf,EAAeA,WAAYQ,EAA3B,EAA2BA,QAASC,EAApC,EAAoCA,iBAApC,OACrB,kBAAC,IAAeC,SAAhB,MACK,SAAAC,GAAK,OAAI,kBAACC,EAAD,CAAsBC,UAAWF,EAAOL,MAAOA,EAAOC,KAAMA,EACtEP,WAAYA,EAAYQ,QAASA,EAASC,iBAAkBA,QAI9DG,EAAuB,SAAC,GAAqE,IAApEC,EAAmE,EAAnEA,UAAWP,EAAwD,EAAxDA,MAAOC,EAAiD,EAAjDA,KAAMP,EAA2C,EAA3CA,WAAYQ,EAA+B,EAA/BA,QACzDM,EADwF,EAAtBL,kBAC9BM,IAE1C,OACI,kBAAC,IAAMC,SAAP,KACI,kBAACjB,EAAD,CAAeC,WAAYA,KACzBa,GAAaN,EACX,uBAAGN,UAAU,+BAA+BgB,KAAI,OAASV,EAAKW,MAAM,GAAI,GAAxB,OAAkCC,UAAQ,GAA1F,mBAGA,KACJ,kBAACL,EAAD,CAAeN,QAASA,IACxB,kBAAC,IAAD,CAAwBY,UAAWd,MAelCe,EAAwB,SAACC,GAClC,IAAMC,EAAgBD,EAAKE,eAAeC,YAAYF,cAEhDG,EAAY,IAAInC,KAAKgC,EAAcI,eACnCC,EAAU,IAAIrC,KAAKgC,EAAcM,aACjCC,EAAQJ,EAAUK,mBAAmB,QAASvC,GAEpD,OAAK+B,EAAcS,WAER9D,YAAWwD,EAAWE,GACtBE,EAAK,IAAOF,EAAQK,mBAAmB,QAAS,CAACpC,KAAM,UAAWC,OAAQ,YAE1EgC,EAAK,MAASF,EAAQG,mBAAmB,QAASvC,GAJlDsC,GASAI,sBAAK7B,GAAW,SAAAiB,GAAI,MAAK,CAACa,SAAUd,EAAsBC,OAElE,IAAMc,EAAK","file":"component---src-templates-event-info-jsx-08805f1e29d184e5a35a.js","sourcesContent":["// Do two dateTimes occur on the same day?\nexport function areSameDay(date1, date2) {\n    const daysMatch = date1.getDate() === date2.getDate()           // Do the days (of the month) match?\n    const monthsMatch = date1.getMonth() === date2.getMonth()       // Do the months match?\n    const yearsMatch = date1.getFullYear() === date2.getFullYear()  // Do the years match?\n    return daysMatch && monthsMatch && yearsMatch                   // Then they render to the same day\n}\n\n// Do two dateTimes occur on the same minute? (Smallest meaningful resolution for events, we've decided)\nexport function areSameMinute(date1, date2) {\n    const minutesMatch = date1.getMinutes() === date2.getMinutes()\n    const hoursMatch = date1.getHours() === date2.getHours()\n    const daysMatch = date1.getDate() === date2.getDate()\n    const monthsMatch = date1.getMonth() === date2.getMonth()\n    const yearsMatch = date1.getFullYear() === date2.getFullYear()\n    return minutesMatch && hoursMatch && daysMatch && monthsMatch && yearsMatch\n}\n\n// Does this date occur on or after the given day?\n// Even if an event took place \"earlier today\", it will still show up\nexport function isOnOrAfterDay(baseDate, testDate) {\n    const basePureDate = toPureDate(baseDate)\n    const testPureDate = toPureDate(testDate)\n\n    return testPureDate.getTime() >= basePureDate.getTime()\n}\n\n// Removes the time part of a Date\nfunction toPureDate(dateTime) {\n    return new Date(dateTime.getFullYear(), dateTime.getMonth(), dateTime.getDate())\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { graphql } from 'gatsby'\n\nimport PreviewCompatibleImage from '../components/PreviewCompatibleImage'\nimport { HTMLContent } from '../components/Content'\nimport { site } from '../util/templating'\nimport { areSameDay } from '../util/dates'\nimport { PreviewContext } from '../util/context'\n\n//display style of the event date\nexport const displayStyle = {\n    weekday: \"long\",\n    day: \"numeric\",\n    month: \"long\",\n    year: \"numeric\",\n    hour: \"2-digit\",\n    minute: \"2-digit\"\n}\n\n// List of types shown near top of event\nconst EventTypeList = ({eventTypes}) => {\n    if (eventTypes) {\n        return (\n            <div className=\"tags\">\n                {eventTypes.map(eventType => <span key={eventType} className=\"tag\">{eventType}</span>)}\n            </div>\n        )\n    } else {\n        return null\n    }\n}\n\nEventTypeList.propTypes = {\n    eventTypes: PropTypes.arrayOf(PropTypes.string)\n}\n\n// used by website and CMS previews\nexport const EventInfo = ({image, slug, eventTypes, content, contentComponent}) => (\n    <PreviewContext.Consumer>\n        {value => <EventInfoWithContext isPreview={value} image={image} slug={slug}\n        eventTypes={eventTypes} content={content} contentComponent={contentComponent} />}\n    </PreviewContext.Consumer>\n)\n\nconst EventInfoWithContext = ({isPreview, image, slug, eventTypes, content, contentComponent}) => {\n    const BodyComponent = contentComponent || HTMLContent\n\n    return (\n        <React.Fragment>\n            <EventTypeList eventTypes={eventTypes} />\n            {!isPreview && slug ? (\n                <a className=\"button event-download-button\" href={`/ics${slug.slice(0, -1)}.ics`} download>\n                    Add to Calendar\n                </a>\n            ) : null}\n            <BodyComponent content={content} />\n            <PreviewCompatibleImage imageInfo={image} />\n        </React.Fragment>\n    )\n}\n\nEventInfoWithContext.propTypes = {\n    isPreview: PropTypes.bool,\n    eventTypes: EventTypeList.propTypes.eventTypes,\n    image: PropTypes.object.isRequired,\n    content: PropTypes.string.isRequired,\n    contentComponent: PropTypes.elementType\n}\n\nEventInfo.propTypes = EventInfoWithContext.propTypes\n\nexport const generateEventSubtitle = (data) => {\n    const dateTimeRange = data.markdownRemark.frontmatter.dateTimeRange\n\n    const startDate = new Date(dateTimeRange.startDateTime)\n    const endDate = new Date(dateTimeRange.endDateTime)\n    const start = startDate.toLocaleDateString(\"en-GB\", displayStyle)\n\n    if (!dateTimeRange.provideEnd) {\n        return start\n    } else if (areSameDay(startDate, endDate)) {\n        return start + `–${endDate.toLocaleTimeString(\"en-GB\", {hour: \"2-digit\", minute: \"2-digit\"})}`\n    } else {\n        return start + ` – ${endDate.toLocaleDateString(\"en-GB\", displayStyle)}`\n    }\n    // This allows for events to go on overnight / over multiple days\n}\n\nexport default site(EventInfo, data => ({subtitle: generateEventSubtitle(data)}))\n\nexport const query = graphql`\nquery eventInfoTemplate($id: String!) {\n    markdownRemark(id: { eq: $id }) {\n        ...EventFragment\n    }\n    heroData: allMarkdownRemark(filter: {id: {eq: $id}}) {\n        ...HeroFragment\n    }\n}\n`"],"sourceRoot":""}