{"version":3,"sources":["webpack:///./src/templates/about-page.jsx","webpack:///./src/components/VerticalTileColumn.jsx","webpack:///./src/components/StrawberryCard.jsx"],"names":["AboutPage","content","contentComponent","strawberryTiles","BodyComponent","HTMLContent","className","site","query","VerticalTileColumn","props","children","StrawberryCard","image","imageAltText","text","Fragment","StrawberryCardDesktop","src","alt","StrawberryCardMobile","StrawberryTiles","length","map","tileWrapper","index","strawberryTile","isPublic","key","StrawberryTile"],"mappings":"6FAAA,oJASaA,EAAY,SAAC,GAAkD,IAAjDC,EAAgD,EAAhDA,QAASC,EAAuC,EAAvCA,iBAAkBC,EAAqB,EAArBA,gBAC5CC,EAAgBF,GAAoBG,IAE1C,OACE,yBAAKC,UAAU,2BACb,kBAAC,IAAD,CAAiBH,gBAAiBA,IAClC,yBAAKG,UAAU,UACb,kBAACF,EAAD,CAAeH,QAASA,OAYnBM,sBAAKP,GAEb,IAAMQ,EAAK,c,2DCbHC,EAdY,SAAAC,GAAK,OAC9B,yBAAKJ,UAAU,oBACb,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,8BACZI,EAAMC,aCPf,oEAIA,IAGaC,EAAiB,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,aAAcC,EAAU,EAAVA,KACnD,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,EAAD,CAAuBH,MAAOA,EAAOC,aAAcA,EAAcC,KAAMA,IACvE,kBAAC,EAAD,CAAsBF,MAAOA,EAAOC,aAAcA,EAAcC,KAAMA,MAKtEE,EAAwB,SAAC,GAAiC,IAAhCJ,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,aAAcC,EAAU,EAAVA,KACnD,OACE,yBAAKT,UAAU,iEACb,4BAAQA,UAAU,gDAChB,yBAAKY,IAAKL,GAhBE,2BAgBoBM,IAAKL,GAfjB,qBAiBtB,uBAAGR,UAAU,kBAAkBS,KAK/BK,EAAuB,SAAC,GAAiC,IAAhCP,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,aAAcC,EAAU,EAAVA,KAClD,OACE,yBAAKT,UAAU,+CACb,yBAAKA,UAAU,SACb,4BAAQA,UAAU,cAChB,uBAAGA,UAAU,kBACX,yBAAKY,IAAKL,GA7BF,2BA6BwBM,IAAKL,GA5BrB,sBA+BpB,yBAAKR,UAAU,iBACb,uBAAGA,UAAU,kBAAkBS,OAO5BM,EAAkB,SAAC,GAAuB,IAAtBlB,EAAqB,EAArBA,gBAC/B,OAAIA,GAAmBA,EAAgBmB,OAAS,EAE5C,kBAAC,EAAD,KACGnB,EAAgBoB,KAAI,SAACC,EAAaC,GAAd,OACnBD,EAAYE,eAAeC,UAAY,kBAAC,EAAD,CAAgBZ,KAAMS,EAAYE,eAAeX,KAAMa,IAAKH,QAIlG,MAILI,EAAiB,SAAC,GAAD,IAAEF,EAAF,EAAEA,SAAUd,EAAZ,EAAYA,MAAOC,EAAnB,EAAmBA,aAAcC,EAAjC,EAAiCA,KAAjC,OACrB,yBAAKT,UAAU,iBACb,kBAAC,EAAD,CAAgBqB,SAAUA,EAAUd,MAAOA,EAAOC,aAAcA,EAAcC,KAAMA","file":"component---src-templates-about-page-jsx-5f925d0a5ac520fa89fc.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { graphql } from 'gatsby'\n\nimport { HTMLContent } from '../components/Content'\nimport { StrawberryTiles } from '../components/StrawberryCard'\nimport { site } from '../util/templating'\n\n// This is used by the websitesite and for CMS previews\nexport const AboutPage = ({content, contentComponent, strawberryTiles}) => {\n    const BodyComponent = contentComponent || HTMLContent\n    \n    return (\n      <div className=\"columns reverse-columns\">\n        <StrawberryTiles strawberryTiles={strawberryTiles}/>\n        <div className=\"column\">\n          <BodyComponent content={content} />\n        </div>\n      </div>\n)}\n\nAboutPage.propTypes = {\n  image: PropTypes.object.isRequired,\n  content: PropTypes.string.isRequired,\n  contentComponent: PropTypes.elementType,\n  strawberryTiles: PropTypes.arrayOf(PropTypes.string)\n}\n\nexport default site(AboutPage)\n\nexport const query = graphql`\nquery aboutPageTemplate($id: String!) {\n    markdownRemark(id: { eq: $id }) {\n      frontmatter {\n        title\n        subtitle\n        strawberryTiles {\n          strawberryTile {\n            isPublic\n            text\n          }\n        }\n      }\n      html\n    }\n    heroData: allMarkdownRemark(filter: {id: {eq: $id}}) {\n      ...HeroFragment\n    }\n  }\n`\n\n\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst VerticalTileColumn = props => (\r\n  <div className=\"column is-narrow\">\r\n    <div className=\"tile is-ancestor\">\r\n      <div className=\"tile is-parent is-vertical\">\r\n        {props.children}\r\n      </div>\r\n    </div>\r\n  </div>\r\n)\r\n\r\nVerticalTileColumn.propTypes = {\r\n  children: PropTypes.node\r\n}\r\n\r\nexport default VerticalTileColumn\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport VerticalTileColumn from './VerticalTileColumn'\r\n\r\nconst defaultIcon = '/img/strawberry-icon.png'\r\nconst defaultImageAltText = 'Strawberry Icon'\r\n\r\nexport const StrawberryCard = ({image, imageAltText, text}) => {\r\n  return (\r\n    <React.Fragment>\r\n      <StrawberryCardDesktop image={image} imageAltText={imageAltText} text={text} />\r\n      <StrawberryCardMobile image={image} imageAltText={imageAltText} text={text} />\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nconst StrawberryCardDesktop = ({image, imageAltText, text}) => {\r\n  return (\r\n    <div className=\"box has-background-primary is-hidden-mobile strawberry-square\">\r\n      <figure className=\"image is-64x64 strawberry-card-desktop-image\">\r\n        <img src={image || defaultIcon} alt={imageAltText || defaultImageAltText} />\r\n      </figure>\r\n      <p className=\"has-text-white\">{text}</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst StrawberryCardMobile = ({image, imageAltText, text}) => {\r\n  return (\r\n    <div className=\"box has-background-primary is-hidden-tablet\">\r\n      <div className=\"media\">\r\n        <figure className=\"media-left\">\r\n          <p className=\"image is-64x64\">\r\n            <img src={image || defaultIcon} alt={imageAltText || defaultImageAltText} />\r\n          </p>\r\n        </figure>\r\n        <div className=\"media-content\">\r\n          <p className=\"has-text-white\">{text}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const StrawberryTiles = ({strawberryTiles}) => {\r\n  if (strawberryTiles && strawberryTiles.length > 0) {\r\n    return (\r\n      <VerticalTileColumn>\r\n        {strawberryTiles.map((tileWrapper, index) => \r\n          tileWrapper.strawberryTile.isPublic && <StrawberryTile text={tileWrapper.strawberryTile.text} key={index}/>)}\r\n      </VerticalTileColumn>\r\n    )\r\n  } else {\r\n    return null\r\n  }\r\n}\r\n\r\nconst StrawberryTile = ({isPublic, image, imageAltText, text}) => (\r\n  <div className=\"tile is-child\">\r\n    <StrawberryCard isPublic={isPublic} image={image} imageAltText={imageAltText} text={text} />\r\n  </div>\r\n)\r\n\r\nStrawberryCard.propTypes = {\r\n  image: PropTypes.string,\r\n  imageAltText: PropTypes.string,\r\n  text: PropTypes.string\r\n}\r\n\r\nStrawberryCardDesktop.propTypes = StrawberryCard.propTypes\r\nStrawberryCardMobile.propTypes = StrawberryCard.propTypes\r\nStrawberryTile.propTypes = StrawberryCard.propTypes\r\n\r\nStrawberryTiles.propTypes = { \r\n  strawberryTiles: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      strawberryTile: PropTypes.shape(\r\n        Object.assign({isPublic: PropTypes.bool.isRequired}, StrawberryCard.PropTypes)\r\n      )\r\n    })\r\n  )\r\n}\r\n"],"sourceRoot":""}