{"version":3,"sources":["webpack:///./node_modules/core-js/modules/es7.object.entries.js","webpack:///./src/components/MainTileWithTwoStackedSideTiles.jsx","webpack:///./src/components/NewsArticleSnapshots.jsx","webpack:///./src/components/NewsMenu.jsx","webpack:///./src/components/Panel.jsx","webpack:///./src/templates/news-time-interval-overview.jsx"],"names":["$export","$entries","S","entries","it","MainTileWithTwoStackedSideTiles","mainTile","sideTopTile","sideBottomTile","className","NewsArticleSnapshot","newsArticles","publicationDate","Date","node","frontmatter","date","imageInfo","_","get","image","to","fields","slug","PreviewCompatibleImage","style","width","title","toDateString","content","shortExcerpt","longExcerpt","NewsArticleSnapshots","newsArticleSnapshots","map","key","NewsMenu","menuEntries","newsArticle","filter","nYears","today","getFullYear","isDateInLastNYears","forEach","year","month","getMonth","undefined","includes","push","getMenuEntries","Object","sort","year1","months","MonthItemsForYear","Fragment","monthName","monthNumber","PanelBlock","panelData","emptyText","isViewportWidthDesktop","getPanels","panel","idx","EmptyPanel","text","Panel","subtitle","mobileSubtitle","excerpt","panelImage","PanelImage","panelHeader","PanelHeader","panelExcerpt","PanelExcerpt","alt","src","length","el","i","NewsTimeIntervalOverview","firstDay","lastDay","firstDate","firstYear","firstMonth","lastDate","selectedNewsArticles","article","firstDayDate","lastDayDate","articleDate","getNewsArticlesInTimeInterval","breadcrumbs","breadcrumbLinks","getDate","isYearInterval","firstPureMonth","lastPureMonth","setMonth","getTime","isMonthInterval","console","log","NewsArchiveBreadcrumbs","getPanelData","html","substring","breadcrumb","index","site","additionalPropsExtractor","data","pageContext","allMarkdownRemark","edges","isWide","query"],"mappings":"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","file":"component---src-templates-news-time-interval-overview-jsx-1bd8ff629ed814089da9.js","sourcesContent":["// https://github.com/tc39/proposal-object-values-entries\nvar $export = require('./_export');\nvar $entries = require('./_object-to-array')(true);\n\n$export($export.S, 'Object', {\n  entries: function entries(it) {\n    return $entries(it);\n  }\n});\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst MainTileWithTwoStackedSideTiles = ({mainTile, sideTopTile, sideBottomTile}) => (\r\n  <div className=\"tile is-ancestor\">\r\n    <div className=\"tile is-parent\">\r\n      <div className=\"tile is-child box main-box\">\r\n        {mainTile}\r\n      </div>\r\n    </div>\r\n    <div className=\"tile is-4 is-vertical is-parent small-box\">\r\n      <div className=\"tile is-child box small-box\">\r\n        {sideTopTile}  \r\n      </div>\r\n      <div className=\"tile is-child box small-box\">\r\n        {sideBottomTile}  \r\n      </div>\r\n    </div>\r\n  </div>\r\n)\r\n\r\nMainTileWithTwoStackedSideTiles.propTypes = {\r\n  mainTile: PropTypes.element,\r\n  sideTopTile: PropTypes.element,\r\n  sideBottomTile: PropTypes.element\r\n}\r\n\r\nexport default MainTileWithTwoStackedSideTiles\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'gatsby'\r\nimport _ from 'lodash'\r\n\r\nimport PreviewCompatibleImage from './PreviewCompatibleImage'\r\nimport MainTileWithTwoStackedSideTiles from './MainTileWithTwoStackedSideTiles'\r\nimport { newsArticleValidator } from './validators'\r\nimport { HTMLContent } from './Content'\r\nimport { toDateString } from '../util/dates'\r\n\r\n//display style of the event date\r\nexport const displayStyle = {\r\n  day: \"numeric\",\r\n  month: \"long\",\r\n  year: \"numeric\"\r\n}\r\n\r\nexport const NewsArticleSnapshot = ({newsArticles}) => {\r\n  const publicationDate = new Date(newsArticles.node.frontmatter.date)\r\n\r\n  const imageInfo = _.get(\r\n    newsArticles.node.frontmatter.image,\r\n    'srcNode.childImageSharp.fixedAspect',\r\n    newsArticles.node.frontmatter.image\r\n  )\r\n  const imageWrapperStyle = {\r\n    width: \"100%\"\r\n  }\r\n\r\n  return (\r\n    <article className=\"news-preview\">\r\n      <Link to={newsArticles.node.fields.slug}>\r\n        <PreviewCompatibleImage imageInfo={imageInfo} style={imageWrapperStyle} />\r\n        <h2 className=\"title is-5 news-snapshot-title\">{newsArticles.node.frontmatter.title}</h2>\r\n      </Link>\r\n      <h3 className=\"subtitle is-7\">{toDateString(publicationDate)}</h3>\r\n      <HTMLContent content={newsArticles.node.shortExcerpt} className=\"news-excerpt news-excerpt-short\" />\r\n      <HTMLContent content={newsArticles.node.longExcerpt} className=\"news-excerpt news-excerpt-long\" />\r\n  </article>\r\n  )\r\n}\r\n\r\nNewsArticleSnapshot.propTypes = {\r\n  newsArticles: newsArticleValidator\r\n}\r\n\r\nconst NewsArticleSnapshots = ({newsArticles}) => {\r\n  const newsArticleSnapshots = newsArticles.map(newsArticles => \r\n    <NewsArticleSnapshot \r\n      newsArticles={newsArticles}\r\n      key={newsArticles.node.fields.slug}\r\n    />\r\n  )\r\n\r\n  return (\r\n    <MainTileWithTwoStackedSideTiles \r\n      mainTile={newsArticleSnapshots[0]}\r\n      sideTopTile={newsArticleSnapshots[1]}\r\n      sideBottomTile={newsArticleSnapshots[2]}\r\n    />\r\n  )\r\n}\r\n\r\nNewsArticleSnapshots.propTypes = {\r\n  newsArticles: PropTypes.arrayOf(newsArticleValidator)\r\n}\r\n\r\nexport default NewsArticleSnapshots","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'gatsby'\r\n\r\nimport NewsArticleSnapshots from '../components/NewsArticleSnapshots'\r\n\r\nconst NewsMenu = ({newsArticles}) => {\r\n    const menuEntries = getMenuEntries(newsArticles)\r\n    return (\r\n        <nav className=\"menu\">\r\n            <h1 className = \"subtitle\">\r\n                Archive\r\n            </h1>\r\n            {Object.entries(menuEntries)\r\n                .sort(([year1], [year2]) => year2 - year1)\r\n                .map(([year, months]) => <MonthItemsForYear key={year} year={year} months={months}/> )}\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default NewsMenu\r\n\r\nconst MonthItemsForYear = ({year, months}) => (\r\n    <React.Fragment>\r\n        <Link to ={`/news/${year}`} className=\"menu-label\">{year}</Link>\r\n        <ul className=\"menu-list\">\r\n            {months.sort().map(month => (\r\n                <li key={month}>\r\n                    <Link to={`/news/${year}/${month + 1}`}>\r\n                        {monthName(month)}\r\n                    </Link>\r\n                </li>\r\n            ))}\r\n        </ul>\r\n    </React.Fragment>\r\n)\r\n\r\n\r\nexport function monthName(monthNumber) {\r\n    const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n        \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\r\n    return monthNames[monthNumber]\r\n}\r\n\r\nfunction getMenuEntries(newsArticles) {\r\n    let menuEntries = {}\r\n\r\n    newsArticles\r\n        .map(newsArticle => new Date(newsArticle.node.frontmatter.date))\r\n        .filter(date => isDateInLastNYears(date, 3))\r\n        .forEach(date => {\r\n            const year = date.getFullYear()\r\n            const month = date.getMonth()\r\n            if (menuEntries[year] === undefined) {\r\n                menuEntries[year] = []\r\n            }\r\n            \r\n            if(!menuEntries[year].includes(month)) {\r\n                menuEntries[year].push(month)\r\n            }\r\n        })\r\n    \r\n    return menuEntries\r\n}\r\n\r\nfunction isDateInLastNYears(date, nYears) {\r\n    // Is the date 'date' within the last n years of today?\r\n    const today = new Date()\r\n    return date.getFullYear() >= today.getFullYear() - nYears + 1\r\n}\r\n\r\nNewsMenu.propTypes = {\r\n    newsArticles: NewsArticleSnapshots.propTypes.newsArticles\r\n}\r\n\r\nMonthItemsForYear.propTypes = {\r\n    year: PropTypes.string,\r\n    months: PropTypes.arrayOf(PropTypes.number)\r\n}\r\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'gatsby'\nimport _ from 'lodash'\n\nimport PreviewCompatibleImage from './PreviewCompatibleImage'\nimport { HTMLContentSmall } from './Content'\n\n// Component used in News Archive, Upcoming Events & Calendar Day Modal\n// CSS classes use name \"xpanel\" to distinguish from Bulma panel class\nexport const PanelBlock = ({panelData, emptyText, isViewportWidthDesktop}) => (\n    <div className={`xpanel-block`}>\n        {\n            getPanels(panelData, emptyText).map((panel, idx) => (\n                <div key={idx} className={`xpanel-background ${isViewportWidthDesktop ? \"is-viewport-width\" : \"\"}`}>\n                    <section className = \"section section-root\">\n                        <div className=\"container wide-container\">\n                            {panel}\n                        </div>\n                    </section>\n                </div>\n            ))\n        }\n    </div>\n)\n\nconst EmptyPanel = ({text}) => {\n    return (\n        <div className=\"xpanel\">\n            {text}\n        </div>\n    )\n}\n\nexport const Panel = ({image, slug, title, subtitle, mobileSubtitle, excerpt}) => {\n\n    const panelImage = <PanelImage image={image} />\n    const panelHeader = <PanelHeader slug={slug}\n                                     title={title}\n                                     subtitle={subtitle}\n                                     mobileSubtitle={mobileSubtitle} />\n    const panelExcerpt = <PanelExcerpt excerpt={excerpt} />\n\n    return (\n        <div className=\"xpanel\">\n            <div className=\"xpanel-header\">\n                {panelHeader}\n            </div>\n            <div className=\"xpanel-image\">\n                {panelImage}\n            </div>\n            <div className=\"xpanel-excerpt\">\n                {panelExcerpt}\n            </div>\n        </div>\n    )\n}\n\nconst PanelImage = ({image}) => {\n    if (image) {\n        const imageInfo = {\n            alt: image.alt,\n            src: _.get(image, 'srcNode.childImageSharp.fixedAspect.src', image.src)\n        }\n        return <PreviewCompatibleImage imageInfo={imageInfo} />\n    }\n    else {\n        return null\n    }\n}\n\nconst PanelHeader = ({slug, title, subtitle, mobileSubtitle}) => (\n    <Link to={slug}>\n        <h2 className={`title is-4 upcoming-title`}><strong>{title}</strong></h2>\n        <h3 className={`subtitle is-6 upcoming-subtitle is-hidden-mobile`}><strong>{subtitle}</strong></h3>\n        <h3 className={`subtitle is-6 upcoming-subtitle is-hidden-tablet`}><strong>{mobileSubtitle || subtitle}</strong></h3>\n    </Link>\n)\n\nconst PanelExcerpt = ({excerpt}) => (\n    <HTMLContentSmall content={excerpt} />\n)\n\n\nconst getPanels = (panelData, emptyText) => {\n    if (panelData.length > 0) {\n        return panelData.map((el, i) => <Panel image={el.image}\n                                               slug={el.slug}\n                                               title={el.title}\n                                               subtitle={el.subtitle}\n                                               mobileSubtitle={el.mobileSubtitle}\n                                               excerpt={el.excerpt}\n                                               key={i} />)\n    }\n    return [<EmptyPanel key=\"1\" text={emptyText || \"\"} />]\n}\n\nPanelExcerpt.propTypes = { excerpt: PropTypes.string }\n\nPanelHeader.propTypes = {\n    slug: PropTypes.string,\n    title: PropTypes.string,\n    subtitle: PropTypes.string,\n    mobileSubtitle: PropTypes.string,\n}\n\nPanelImage.propTypes = { image: PropTypes.object }\n\nPanel.propTypes = {\n    image: PropTypes.object,\n    slug: PropTypes.string,\n    title: PropTypes.string,\n    subtitle: PropTypes.string,\n    mobileSubtitle: PropTypes.string,\n    excerpt: PropTypes.string,\n}\n\nEmptyPanel.propTypes = { text: PropTypes.string }\n\nPanelBlock.propTypes = {\n    panelData: PropTypes.arrayOf(PropTypes.object).isRequired,\n    emptyText: PropTypes.string,\n    isViewportWidthDesktop: PropTypes.bool\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { graphql, Link } from 'gatsby'\n\nimport { PanelBlock } from '../components/Panel'\nimport { toDateString } from '../util/dates'\nimport { site } from '../util/templating'\nimport NewsMenu, { monthName } from '../components/NewsMenu.jsx'\nimport NewsArticleSnapshots from '../components/NewsArticleSnapshots'\n\n// This is used by the website and for CMS previews\nexport const NewsTimeIntervalOverview = ({newsArticles, firstDay, lastDay}) => {\n  const firstDate = new Date(firstDay)\n  const firstYear = firstDate.getFullYear()\n  const firstMonth = firstDate.getMonth()\n  const lastDate = new Date(lastDay)\n  const selectedNewsArticles = getNewsArticlesInTimeInterval(newsArticles, firstDate, lastDate)\n  const breadcrumbs = ['News']\n  const breadcrumbLinks = ['/news']\n\n  if (isYearInterval(firstDate, lastDate)) {\n    breadcrumbs.push(firstYear)\n    breadcrumbLinks.push(`/news/${firstYear}`)\n  } else if (isMonthInterval(firstDate, lastDate)) {\n    breadcrumbs.push(firstYear)\n    breadcrumbs.push(monthName(firstMonth))\n    breadcrumbLinks.push(`/news/${firstYear}`)\n    breadcrumbLinks.push(`/news/${firstYear}/${firstMonth + 1}`)\n  } else {\n    console.log(\"Unexpected date interval passed to page constructor.\")\n  }\n\n  return (\n    <React.Fragment>\n      <NewsArchiveBreadcrumbs breadcrumbs={breadcrumbs} breadcrumbLinks={breadcrumbLinks} />\n      <hr />\n      <div className=\"columns\">\n        <div className=\"column is-four-fifths\">\n          <PanelBlock panelData={selectedNewsArticles.map((article) => getPanelData(article))} isViewportWidthDesktop={false} />\n        </div>\n        <div className=\"column\">\n          <NewsMenu newsArticles={newsArticles}/>\n        </div>          \n      </div>\n    </React.Fragment>\n  )\n}\n\nconst getPanelData = (article) => {\n  return {\n    image: article.node.frontmatter.image,\n    slug: article.node.fields.slug,\n    title: article.node.frontmatter.title,\n    subtitle: toDateString(new Date(article.node.frontmatter.date)),\n    excerpt: article.node.html.substring(0,360)+\" ...\"\n  }\n}\n\nconst NewsArchiveBreadcrumbs = ({breadcrumbs, breadcrumbLinks}) => {\n  return (\n    <nav className=\"breadcrumb is-large\">\n      <ul>\n        {breadcrumbs.map((breadcrumb, index) => (<li key={breadcrumb}><Link to={breadcrumbLinks[index]}>{breadcrumb}</Link></li>))}\n      </ul>\n    </nav>\n  )\n}\n\nconst extractor = (data, pageContext) => ({\n  newsArticles: data.allMarkdownRemark.edges,\n  title: pageContext && pageContext.title ? pageContext.title : 'News Archive'\n})\n\nexport default site(NewsTimeIntervalOverview, { additionalPropsExtractor: extractor, isWide: true })\n\nexport const query = graphql`\nquery newsMonthOverviewTemplate{\n  allMarkdownRemark(filter: {frontmatter: {templateKey: {eq: \"news-article\"}}}, sort: {fields: frontmatter___date, order: DESC}) {\n      edges {\n        node {\n          ...NewsFragment\n        }\n      }\n    }\n  }\n`\nfunction getNewsArticlesInTimeInterval(newsArticles, firstDay, lastDay) {\n  return newsArticles.filter(article => isInTimeInterval(firstDay, lastDay, new Date(article.node.frontmatter.date)))\n}\n\nfunction isInTimeInterval(firstDayDate, lastDayDate, articleDate) {\n  return firstDayDate<= articleDate && articleDate < lastDayDate\n}\n\n// Checks whether the given interval is from 01 Jan (year) to 01 Jan (year + 1)\nfunction isYearInterval(firstDate, lastDate) {\n  return (\n    firstDate.getFullYear() + 1 === lastDate.getFullYear() &&\n    firstDate.getMonth() === 0 &&\n    lastDate.getMonth() === 0 &&\n    firstDate.getDate() === 1 &&\n    lastDate.getDate() === 1\n  )\n}\n\n// Checks whether the given interval is from 01 (month) (year) to 01 (month + 1) (year)\nfunction isMonthInterval(firstDate, lastDate) {\n  const firstPureMonth = new Date(firstDate.getFullYear(), firstDate.getMonth())\n  const lastPureMonth = new Date(lastDate.getFullYear(), lastDate.getMonth())\n  firstPureMonth.setMonth(firstPureMonth.getMonth() + 1)\n\n  return (\n    firstPureMonth.getTime() === lastPureMonth.getTime() &&  // Have to do it this way to ensure December works\n    firstDate.getDate() === 1 &&\n    lastDate.getDate() === 1\n  )\n}\n\nNewsTimeIntervalOverview.propTypes = {\n  newsArticles: NewsArticleSnapshots.propTypes.newsArticles,\n  firstDay: PropTypes.string.isRequired,\n  lastDay: PropTypes.string.isRequired\n}\n\nNewsArchiveBreadcrumbs.propTypes = {\n  breadcrumbs: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.number])),\n  breadcrumbLinks: PropTypes.arrayOf(PropTypes.string)\n}\n"],"sourceRoot":""}