{"version":3,"sources":["webpack:///./src/components/calendar/CalendarDay.jsx","webpack:///./src/components/calendar/Calendar.jsx","webpack:///./src/templates/calendar-page.jsx","webpack:///./src/components/calendar/EventFilter.jsx","webpack:///./src/util/dates.js","webpack:///./src/components/calendar/CalendarViewToggle.jsx","webpack:///./src/templates/event-info.jsx","webpack:///./src/util/filters.js","webpack:///./src/components/calendar/EventType.js","webpack:///./src/components/calendar/Upcoming.jsx","webpack:///./src/components/calendar/getEventList.js"],"names":["CalendarDayModal","date","events","close","active","className","onClick","toLocaleDateString","longDateFormatOptions","map","event","key","fields","slug","aria-label","NoEventsModal","DayText","areSameDay","Date","src","width","dateDisplayFormatOptions","weekday","day","month","year","CalendarDay","dateTime","useState","showModal","setShowModal","currentImage","setCurrentImage","eventsWithPics","filter","frontmatter","image","nImages","length","useEffect","timeoutVar","setTimeout","clearTimeout","internals","modalOn","modalOff","Fragment","slice","to","title","eventWithPic","style","backgroundImage","_","get","position","index","opacity","transition","Calendar","Consumer","value","isPreview","previewEventList","CalendarWithContext","focusDate","setFocusDate","filterProps","useFilters","eventTypeList","getEventList","daysInFocusMonth","getFullYear","getMonth","getDate","monthChange","n","newDate","setMonth","days","Array","keys","monthForward","monthBack","EventFilter","dayNumber","eventsOnDate","filterEvents","activeFilters","MonthScrubber","dateTimeRange","startDateTime","CalendarPage","CalendarViewToggle","view","query","site","data","allMarkdownRemark","edges","tabTitle","EnabledFilterTag","name","remove","DisabledFilterTag","add","EventFilterBlock","EventFilterTags","allFilters","addFilter","removeFilter","clearFilters","tags","includes","push","eventFilters","every","eventType","eventTypes","date1","date2","daysMatch","monthsMatch","yearsMatch","areSameMinute","minutesMatch","getMinutes","hoursMatch","getHours","isOnOrAfterDay","baseDate","testDate","basePureDate","toPureDate","getTime","modifier","displayStyle","hour","minute","EventTypeList","EventInfo","content","contentComponent","EventInfoWithContext","BodyComponent","HTMLContent","href","download","imageInfo","generateEventSubtitle","markdownRemark","startDate","endDate","endDateTime","start","provideEnd","toLocaleTimeString","subtitle","filterList","filters","setFilters","filterName","concat","EventMediaBlock","eventUrl","alt","excerpt","EventPanelBlock","NoEventsFoundBlock","Upcoming","UpcomingWithContext","eventPanels","nodes","sort","event1","event2","range1","range2","start1","start2","end1"],"mappings":"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","file":"component---src-templates-calendar-page-jsx-3e5f75f3a5721276b039.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'gatsby'\nimport _ from 'lodash'\n\nimport { eventPropTypeValidator } from '../validators'\nimport { EventMediaBlock } from './Upcoming'\nimport { areSameDay } from '../../util/dates'\n\n// How many events' names should we write in the box, at maximum?\nconst maxEvents = 3\n\n// Represents a day in the calendar. Will either be empty or contain a preview of an event.\nconst CalendarDay = ({dateTime, events}) => {\n    // TODO: Change the method of indicating it's \"today\", so as still to be visible when there's an event today\n    const date = new Date(dateTime)  // The actual Date this CalendarDay is representing\n\n    // Are we showing the modal?\n    const [ showModal, setShowModal ] = useState(false)\n\n    // Image setting for revolving images\n    const [ currentImage, setCurrentImage ] = useState(0)\n\n    // Revolving image hook\n    const eventsWithPics = events.filter(event => event.frontmatter.image)\n    const nImages = eventsWithPics.length\n    const imageRotateTimeMS = 4000\n    const imageFadeTimeS = 0.5\n\n    useEffect(() => {\n        if (nImages > 1) {\n            const timeoutVar = setTimeout(() => {\n                // Update current shown image counter\n                setCurrentImage((currentImage + 1) % nImages)\n            }, imageRotateTimeMS)\n\n            // Clean up if this component unmounts\n            return () => {\n                clearTimeout(timeoutVar)\n            }\n        }\n    })\n\n    const modalOn = () => {\n        setShowModal(true)\n    }\n\n    const modalOff = () => {\n        setShowModal(false)\n    }\n\n    let internals\n\n    if (eventsWithPics.length === 0) {\n        // No pictures to show\n        if (events.length === 0) {\n            internals = (\n                <React.Fragment>\n                    <NoEventsModal date={date} close={modalOff} active={showModal} />\n                    <div className=\"box button has-text-left calendar-day\" onClick={modalOn}>\n                        <DayText date={date} />\n                    </div>\n                </React.Fragment>\n            )\n        } else {\n            internals = (\n                <React.Fragment>\n                    <CalendarDayModal date={date} events={events} close={modalOff} active={showModal} />\n                    <div className=\"box button has-text-left calendar-day has-text-white has-text-weight-bold is-primary-pale\" onClick={modalOn}>\n                        <DayText date={date} />\n                        {events.slice(0, maxEvents).map(event =>\n                        <p key={event.fields.slug}><Link className=\"has-text-white has-text-weight-medium\" to={event.fields.slug}>{event.frontmatter.title}</Link></p>)}\n                        {events.length > maxEvents ? <p>...</p> : null}\n                    </div>\n                </React.Fragment>\n            )\n        }\n    } else if (eventsWithPics.length === 1) {\n        const eventWithPic = eventsWithPics[0]\n\n        internals = (\n            <React.Fragment>\n                <CalendarDayModal date={date} events={events} close={modalOff} active={showModal} />\n                <div className=\"box button has-text-left calendar-day has-text-white has-text-weight-bold\" onClick={modalOn}\n                style={{\n                    backgroundImage: `url(${_.get(eventWithPic.frontmatter.image, 'srcNode.childImageSharp.editedFluid.src', eventWithPic.frontmatter.image.src)})`}}>\n                    <DayText date={date} />\n                    {events.slice(0, maxEvents).map(event =>\n                    <p key={event.fields.slug}><Link className=\"has-text-white has-text-weight-medium\" to={event.fields.slug}>{event.frontmatter.title}</Link></p>)}\n                    {events.length > maxEvents ? <p>...</p> : null}\n                </div>\n            </React.Fragment>\n        )\n    } else {\n        internals = (\n            <div style={{position: \"relative\"}}>\n                <CalendarDayModal date={date} events={events} close={modalOff} active={showModal} />\n                {eventsWithPics.map((event, index) =>\n                    <div key={event.fields.slug} className=\"box button has-text-left calendar-day has-text-white has-text-weight-bold\" onClick={modalOn} style={{\n                            backgroundImage: `url(${_.get(event.frontmatter.image, 'srcNode.childImageSharp.editedFluid.src', event.frontmatter.image.src)})`,\n                            opacity: index === currentImage ? 1 : 0,\n                            transition: `opacity ${imageFadeTimeS}s`,\n                            position: \"absolute\",\n                            width: \"100%\"}}>\n                        <DayText date={date} />\n                        {events.slice(0, maxEvents).map(event =>\n                        <p key={event.fields.slug}><Link className=\"has-text-white has-text-weight-medium\" to={event.fields.slug}>{event.frontmatter.title}</Link></p>)}\n                        {events.length > maxEvents ? <p>...</p> : null}\n                    </div>\n                )}\n            </div>\n        )\n    }\n\n    return (\n        <div className=\"column is-half-mobile is-one-quarter-tablet is-2-desktop\">\n            {internals}\n        </div>\n    )\n}\n\nconst CalendarDayModal = ({date, events, close, active}) => {\n    return (\n        <div className={`modal ${active ? \"is-active\" : \"\"}`}>\n            <div className=\"modal-background\" onClick={close}></div>\n            <div className=\"modal-content\">\n                <div className=\"message\">\n                    <h1 className=\"message-header is-primary\">{date.toLocaleDateString('en-GB', longDateFormatOptions)}</h1>\n                    <div className=\"message-body\">\n                        {events.map(event => <EventMediaBlock key={event.fields.slug} event={event} />)}\n                    </div>\n                </div>\n            </div>\n            <button className=\"modal-close is-large\" aria-label=\"close\" onClick={close}></button>\n        </div>\n    )\n}\n\nconst NoEventsModal = ({date, close, active}) => (\n    <div className={`modal ${active ? \"is-active\" : \"\"}`}>\n        <div className=\"modal-background\" onClick={close}></div>\n        <div className=\"modal-content\">\n            <div className=\"notification\">\n                <p>No events on {date.toLocaleDateString('en-GB', longDateFormatOptions)}.</p>\n            </div>\n        </div>\n        <button className=\"modal-close is-large\" aria-label=\"close\" onClick={close}></button>\n    </div>\n)\n\nconst DayText = ({date}) => (\n    <p>\n        {areSameDay(date, new Date()) ? (\n            // This day is today, so render a pencil circle around the day text\n            <img className=\"pencil-circle\" src=\"/img/pencil-circle.png\" width=\"140\" />\n        ) : null}\n        {date.toLocaleDateString('en-GB', dateDisplayFormatOptions)}\n    </p>\n)\n\nconst dateDisplayFormatOptions = {weekday: 'short', day: 'numeric'}\nconst longDateFormatOptions = {weekday: 'long', day: 'numeric', month: 'long', year: 'numeric'}\n\nexport default CalendarDay\n\nCalendarDay.propTypes = {\n    dateTime: PropTypes.instanceOf(Date),\n    events: PropTypes.arrayOf(\n        eventPropTypeValidator\n    )\n}\n\nCalendarDayModal.propTypes = {\n    date: PropTypes.instanceOf(Date),\n    events: CalendarDay.propTypes.events,\n    close: PropTypes.func,\n    active: PropTypes.bool\n}\n\nNoEventsModal.propTypes = {\n    date: PropTypes.instanceOf(Date),\n    close: PropTypes.func,\n    active: PropTypes.bool\n}\n\nDayText.propTypes = {\n    date: PropTypes.instanceOf(Date)\n}\n","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { FaChevronLeft, FaChevronRight } from 'react-icons/fa'\n\nimport CalendarDay from './CalendarDay'\nimport { areSameDay } from '../../util/dates'\nimport { eventTypeList } from './EventType'\nimport { eventPropTypeValidator } from '../validators'\nimport { EventFilterBlock, filterEvents } from './EventFilter'\nimport { getEventList } from './getEventList'\nimport { PreviewContext } from '../../util/context'\nimport { useFilters } from '../../util/filters'\n\nexport const Calendar = ({events}) => (\n    <PreviewContext.Consumer>\n        {value => <CalendarWithContext isPreview={value} previewEventList={events} />}\n    </PreviewContext.Consumer>\n)\n\nconst CalendarWithContext = ({isPreview, previewEventList}) => {\n    // Set state\n    const [ focusDate, setFocusDate ] = useState(new Date())\n    const filterProps = useFilters(eventTypeList)\n\n    // Get list of events\n    const events = isPreview ? previewEventList : getEventList()\n\n    // Calculate the number of days in the given month\n    const monthDate = new Date(focusDate.getFullYear(), focusDate.getMonth() + 1, 0)\n    const daysInFocusMonth = monthDate.getDate()\n\n    // Function to change the month\n    const monthChange = (n) => {\n        // Get current month\n        let newDate = new Date(focusDate)\n        const month = newDate.getMonth()\n        newDate.setMonth(month + n)\n\n        // Set focus to new date\n        setFocusDate(newDate)\n    }\n\n    // Function to increment the month\n    const monthForward = () => {\n        monthChange(1)\n    }\n\n    // Function to decrement the month\n    const monthBack = () => {\n        monthChange(-1)\n    }\n\n    const days = [...Array(daysInFocusMonth).keys()].map(n => n + 1)\n    // TODO: Figure out how to get this to work with screenreaders\n    // What would the corect semantic component for this be?\n    return (\n        <React.Fragment>\n            <MonthScrubber monthForward={monthForward} monthBack={monthBack} focusDate={focusDate} />\n            <div className=\"calendar panel\">\n                <EventFilterBlock filterProps={filterProps} />\n                <div className=\"panel-block\">\n                    <div className=\"columns is-multiline is-mobile\">\n                        {days.map(dayNumber => {\n                            const date = new Date(focusDate.getFullYear(), focusDate.getMonth(), dayNumber)\n\n                            return (\n                                <CalendarDay\n                                    key={dayNumber}\n                                    dateTime={date}\n                                    events={eventsOnDate(date, filterEvents(events, filterProps.activeFilters))}\n                                />\n                            )\n                        })}\n                    </div>\n                </div>\n            </div>\n        </React.Fragment>\n    )\n}\n\nconst MonthScrubber = ({monthForward, monthBack, focusDate}) => (\n    <div className=\"month-scrubber\">\n        <button onClick={monthBack} className=\"button is-white\">\n            <span className=\"icon has-text-dark is-large\">\n                <FaChevronLeft />\n            </span>\n        </button>\n        <div className=\"calendar-month\">\n            <p className=\"title is-hidden-mobile\">{new Date(focusDate).toLocaleDateString('en-GB', {year: 'numeric', month: 'long'})}</p>\n            <p className=\"title is-hidden-tablet\">{new Date(focusDate).toLocaleDateString('en-GB', {month: 'long'})}</p>\n            <p className=\"title is-hidden-tablet\">{new Date(focusDate).toLocaleDateString('en-GB', {year: 'numeric'})}</p>\n        </div>\n        <button onClick={monthForward} className=\"button is-white\">\n            <span className=\"icon has-text-dark is-large\">\n                <FaChevronRight />\n            </span>\n        </button>\n    </div>\n)\n\nMonthScrubber.propTypes = {\n    monthForward: PropTypes.func.isRequired,\n    monthBack: PropTypes.func.isRequired,\n    focusDate: PropTypes.instanceOf(Date)\n}\n\nCalendar.propTypes = {\n    events: PropTypes.arrayOf(\n        PropTypes.shape({\n            node: eventPropTypeValidator\n        })\n    )\n}\n\nCalendarWithContext.propTypes = {\n    isPreview: PropTypes.bool.isRequired,\n    previewEventList: Calendar.propTypes.events\n}\n\nfunction eventsOnDate(date, events) {\n    // Array of events on this day, empty if none\n    return events.filter(event => areSameDay(new Date(event.frontmatter.dateTimeRange.startDateTime), date))\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { graphql } from 'gatsby'\n\nimport { site } from '../util/templating'\nimport { Calendar } from '../components/calendar/Calendar'\nimport { CalendarViewToggle } from '../components/calendar/CalendarViewToggle'\nimport { eventPropTypeValidator } from '../components/validators'\n\nexport const CalendarPage = ({events}) => {\n  return (\n    <section>\n      <CalendarViewToggle view='calendar' />\n      <Calendar events={events} />\n    </section>\n  )\n}\n\nCalendarPage.propTypes = {\n  content: PropTypes.node,\n  contentComponent: PropTypes.elementType,\n  events: PropTypes.arrayOf(\n      PropTypes.shape({\n          node: eventPropTypeValidator\n      })\n  )\n}\n\nexport default site(CalendarPage, data => ({events: data.allMarkdownRemark.edges, tabTitle: \"Calendar\"}))\n\nexport const query = graphql`\nquery calendarPageTemplate($id: String!) {\n  markdownRemark(id: { eq: $id }) {\n    html\n  }\n  allMarkdownRemark(filter: {frontmatter: {templateKey: {eq: \"event-info\"}}}, sort: {fields: frontmatter___dateTimeRange___startDateTime, order: ASC}) {\n    edges {\n      node {\n        ...EventFragment\n      }\n    }\n  }\n  heroData: allMarkdownRemark(filter: {id: {eq: $id}}) {\n    ...HeroFragment\n  }\n}\n`\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst EnabledFilterTag = ({name, remove}) => (\n    <a className=\"tag is-primary is-light\" onClick={remove}>{name}</a>\n)\n\nEnabledFilterTag.propTypes = {\n    name: PropTypes.string,\n    remove: PropTypes.func\n}\n\nconst DisabledFilterTag = ({name, add}) => (\n    <a className=\"tag\" onClick={add}>{name}</a>\n)\n\nDisabledFilterTag.propTypes = {\n    name: PropTypes.string,\n    add: PropTypes.func\n}\n\nexport const EventFilterBlock = ({filterProps}) => (\n    <div className=\"panel-block filter\">\n        <EventFilterTags filterProps={filterProps} />\n    </div>\n)\n\nexport const EventFilterTags = ({filterProps: {allFilters, activeFilters, addFilter, removeFilter, clearFilters}}) => {\n    // Construct array of tag objects\n    let tags = []\n    for (const filter of allFilters) {\n        if (activeFilters.includes(filter)) {\n            tags.push(<EnabledFilterTag key={filter} name={filter} remove={removeFilter(filter)} />)\n        } else {\n            tags.push(<DisabledFilterTag key={filter} name={filter} add={addFilter(filter)} />)\n        }\n    }\n\n    return (\n        <span className=\"tags\">\n            <span className=\"tag is-white\">Filters: </span>\n            {tags}\n            <a className=\"tag is-delete\" onClick={clearFilters} />\n        </span>\n    )\n}\n\nEventFilterTags.propTypes = {\n    filterProps: PropTypes.shape({\n        allFilters: PropTypes.arrayOf(PropTypes.string),\n        activeFilters: PropTypes.arrayOf(PropTypes.string),\n        addFilter: PropTypes.func.isRequired,\n        removeFilter: PropTypes.func.isRequired,\n        clearFilters: PropTypes.func.isRequired\n    })\n}\n\nEventFilterBlock.propTypes = EventFilterTags.propTypes\n\n// Function to filter a list of events based on a list of types.\n// We return only events for whom all types in the filter are present.\nexport const filterEvents = (events, eventFilters) => {\n    return events.filter(event => eventFilters.every(eventType => event.frontmatter.eventTypes.includes(eventType)))\n}\n","// Do two dateTimes occur on the same day?\nexport function areSameDay(date1, date2) {\n    const daysMatch = date1.getDate() === date2.getDate()           // Do the days (of the month) match?\n    const monthsMatch = date1.getMonth() === date2.getMonth()       // Do the months match?\n    const yearsMatch = date1.getFullYear() === date2.getFullYear()  // Do the years match?\n    return daysMatch && monthsMatch && yearsMatch                   // Then they render to the same day\n}\n\n// Do two dateTimes occur on the same minute? (Smallest meaningful resolution for events, we've decided)\nexport function areSameMinute(date1, date2) {\n    const minutesMatch = date1.getMinutes() === date2.getMinutes()\n    const hoursMatch = date1.getHours() === date2.getHours()\n    const daysMatch = date1.getDate() === date2.getDate()\n    const monthsMatch = date1.getMonth() === date2.getMonth()\n    const yearsMatch = date1.getFullYear() === date2.getFullYear()\n    return minutesMatch && hoursMatch && daysMatch && monthsMatch && yearsMatch\n}\n\n// Does this date occur on or after the given day?\n// Even if an event took place \"earlier today\", it will still show up\nexport function isOnOrAfterDay(baseDate, testDate) {\n    const basePureDate = toPureDate(baseDate)\n    const testPureDate = toPureDate(testDate)\n\n    return testPureDate.getTime() >= basePureDate.getTime()\n}\n\n// Removes the time part of a Date\nfunction toPureDate(dateTime) {\n    return new Date(dateTime.getFullYear(), dateTime.getMonth(), dateTime.getDate())\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'gatsby'\n\nimport { FaCalendar, FaListUl } from 'react-icons/fa'\n\nexport const CalendarViewToggle = ({view}) => (\n    <React.Fragment>\n        {['is-hidden-touch', 'is-hidden-desktop is-centered'].map(modifier => (\n            <div className={`tabs is-boxed ${modifier}`} key={modifier}>\n                <ul>\n                    <li className={view == 'calendar' ? 'is-active' : ''}>\n                        <Link to=\"/calendar\">\n                            <span className=\"icon is-small\"><FaCalendar /></span><h1>Calendar</h1>\n                        </Link>\n                    </li>\n                    <li className={view == 'upcoming' ? 'is-active' : ''}>\n                        <Link to=\"/events\">\n                            <span className=\"icon is-small\"><FaListUl /></span><h1>Events list</h1>\n                        </Link>\n                    </li>\n                </ul>\n            </div>\n        ))}\n    </React.Fragment>\n)\n\nCalendarViewToggle.propTypes = {\n    view: PropTypes.oneOf(['calendar', 'upcoming'])\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { graphql } from 'gatsby'\n\nimport PreviewCompatibleImage from '../components/PreviewCompatibleImage'\nimport { HTMLContent } from '../components/Content'\nimport { site } from '../util/templating'\nimport { areSameDay } from '../util/dates'\nimport { PreviewContext } from '../util/context'\n\n//display style of the event date\nexport const displayStyle = {\n    weekday: \"long\",\n    day: \"numeric\",\n    month: \"long\",\n    year: \"numeric\",\n    hour: \"2-digit\",\n    minute: \"2-digit\"\n}\n\n// List of types shown near top of event\nconst EventTypeList = ({eventTypes}) => {\n    if (eventTypes) {\n        return (\n            <div className=\"tags\">\n                {eventTypes.map(eventType => <span key={eventType} className=\"tag\">{eventType}</span>)}\n            </div>\n        )\n    } else {\n        return null\n    }\n}\n\nEventTypeList.propTypes = {\n    eventTypes: PropTypes.arrayOf(PropTypes.string)\n}\n\n// used by website and CMS previews\nexport const EventInfo = ({image, slug, eventTypes, content, contentComponent}) => (\n    <PreviewContext.Consumer>\n        {value => <EventInfoWithContext isPreview={value} image={image} slug={slug}\n        eventTypes={eventTypes} content={content} contentComponent={contentComponent} />}\n    </PreviewContext.Consumer>\n)\n\nconst EventInfoWithContext = ({isPreview, image, slug, eventTypes, content, contentComponent}) => {\n    const BodyComponent = contentComponent || HTMLContent\n\n    return (\n        <React.Fragment>\n            <EventTypeList eventTypes={eventTypes} />\n            {!isPreview && slug ? (\n                <a className=\"button event-download-button\" href={`/ics${slug.slice(0, -1)}.ics`} download>\n                    Add to Calendar\n                </a>\n            ) : null}\n            <BodyComponent content={content} />\n            <PreviewCompatibleImage imageInfo={image} />\n        </React.Fragment>\n    )\n}\n\nEventInfoWithContext.propTypes = {\n    isPreview: PropTypes.bool,\n    eventTypes: EventTypeList.propTypes.eventTypes,\n    image: PropTypes.object.isRequired,\n    content: PropTypes.string.isRequired,\n    contentComponent: PropTypes.elementType\n}\n\nEventInfo.propTypes = EventInfoWithContext.propTypes\n\nexport const generateEventSubtitle = (data) => {\n    const dateTimeRange = data.markdownRemark.frontmatter.dateTimeRange\n\n    const startDate = new Date(dateTimeRange.startDateTime)\n    const endDate = new Date(dateTimeRange.endDateTime)\n    const start = startDate.toLocaleDateString(\"en-GB\", displayStyle)\n\n    if (!dateTimeRange.provideEnd) {\n        return start\n    } else if (areSameDay(startDate, endDate)) {\n        return start + `–${endDate.toLocaleTimeString(\"en-GB\", {hour: \"2-digit\", minute: \"2-digit\"})}`\n    } else {\n        return start + ` – ${endDate.toLocaleDateString(\"en-GB\", displayStyle)}`\n    }\n    // This allows for events to go on overnight / over multiple days\n}\n\nexport default site(EventInfo, data => ({subtitle: generateEventSubtitle(data)}))\n\nexport const query = graphql`\nquery eventInfoTemplate($id: String!) {\n    markdownRemark(id: { eq: $id }) {\n        ...EventFragment\n    }\n    heroData: allMarkdownRemark(filter: {id: {eq: $id}}) {\n        ...HeroFragment\n    }\n}\n`","import { useState } from 'react'\n\nexport const useFilters = (filterList) => {\n    const [filters, setFilters] = useState([])\n\n    const addFilter = (filterName) => (\n        () => {setFilters(filters.concat(filterName))}\n    )\n\n    const removeFilter = (filterName) => (\n        () => {setFilters(filters.filter(name => name !== filterName))}\n    )\n\n    const clearFilters = () => {\n        setFilters([])\n    }\n\n    return {\n        allFilters: filterList,\n        activeFilters: filters,\n        addFilter: addFilter,\n        removeFilter: removeFilter,\n        clearFilters: clearFilters\n    }\n}\n","// List of allowed event types.\n// IF YOU UPDATE THIS LIST MAKE SURE YOU ALSO UPDATE THE LIST IN static/admin/config.yml\n// THEY MUST ALWAYS BE IDENTICAL\nexport const eventTypeList = [\n    'Benefit gig',\n    'Meeting - Programming',\n    'Meeting - Finance',\n    'Band competition',\n    'Other',\n]\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'gatsby'\nimport _ from 'lodash'\n\nimport { HTMLContentSmall } from '../Content'\nimport { eventPropTypeValidator } from '../validators'\nimport { EventFilterBlock, filterEvents } from './EventFilter'\nimport { eventTypeList } from './EventType'\nimport { getEventList } from './getEventList'\nimport { PreviewContext } from '../../util/context'\nimport { useFilters } from '../../util/filters'\nimport { isOnOrAfterDay } from '../../util/dates'\nimport { generateEventSubtitle } from '../../templates/event-info'\n\nexport const EventMediaBlock = ({event}) => {\n    const eventUrl = event.fields.slug\n\n    return (\n    <div className=\"media event\">\n        <div className=\"media-left\">\n            <Link to={eventUrl} className=\"image is-64x64\">\n                {event.frontmatter.image ? <img src={_.get(event.frontmatter.image, 'srcNode.childImageSharp.resize.src', event.frontmatter.image.src)}\n                                                alt={event.frontmatter.image.alt} /> : null}\n            </Link>\n        </div>\n        <div className=\"media-content\">\n            <Link to={eventUrl}>\n                <h2 className=\"title is-4\"><strong>{event.frontmatter.title}</strong></h2>\n                <h3 className=\"subtitle is-5\">{generateEventSubtitle({markdownRemark: event})}</h3>\n            </Link>\n            <HTMLContentSmall className=\"add-margin-top\" content={event.excerpt} />\n        </div>\n    </div>\n    )\n}\n\nconst EventPanelBlock = ({event}) => {\n    return (\n        <div className=\"panel-block\">\n            <EventMediaBlock event={event} />\n        </div>\n    )\n}\n\nconst NoEventsFoundBlock = () => (\n    <div className=\"panel-block\">\n        <div className=\"media\">\n            <div className=\"media-content\">\n                <p><strong>No events match the selected filters.</strong></p>\n            </div>\n        </div>\n    </div>\n)\n\nexport const Upcoming = ({events}) => (  // 'events' is only used if it is a preview, otherwise it uses a static query\n    <PreviewContext.Consumer>\n        {value => <UpcomingWithContext isPreview={value} previewEventList={events} />}\n    </PreviewContext.Consumer>\n)\n\nconst UpcomingWithContext = ({isPreview, previewEventList}) => {\n    const filterProps = useFilters(eventTypeList)\n\n    // Get list of events occurring today or later\n    let events = isPreview ? previewEventList : getEventList()\n    events = events.filter(event => isOnOrAfterDay(new Date(), new Date(event.frontmatter.dateTimeRange.provideEnd ? event.frontmatter.dateTimeRange.endDateTime : event.frontmatter.dateTimeRange.startDateTime)))\n\n    const maxItems = 5\n\n    // Construct array of list elements\n    let eventPanels = filterEvents(events, filterProps.activeFilters).slice(0, maxItems).map(event => <EventPanelBlock key={event.frontmatter.title} event={event} />)\n\n    return (\n        <React.Fragment>\n            <h1 className=\"title\">Upcoming Events</h1>\n            <div className=\"upcoming panel\">\n                <EventFilterBlock filterProps={filterProps} />\n                {eventPanels.length > 0 ? eventPanels : <NoEventsFoundBlock />}\n            </div>\n        </React.Fragment>\n    )\n}\n\nEventMediaBlock.propTypes = {\n    event: eventPropTypeValidator\n}\n\nEventPanelBlock.propTypes = {\n    event: EventMediaBlock.propTypes.event\n}\n\nUpcoming.propTypes = {\n    events: PropTypes.arrayOf(\n        PropTypes.shape({\n            node: eventPropTypeValidator\n        })\n    )\n}\n\nUpcomingWithContext.propTypes = {\n    isPreview: PropTypes.bool.isRequired,\n    previewEventList: Upcoming.propTypes.events\n}\n","import { useStaticQuery, graphql } from 'gatsby'\n\nimport { areSameMinute } from '../../util/dates'\n\nexport const getEventList = () => {\n  const { allMarkdownRemark } = useStaticQuery(graphql`\n  query eventList {\n      allMarkdownRemark(filter: {frontmatter: {templateKey: {eq: \"event-info\"}}}, sort: {fields: frontmatter___dateTimeRange___startDateTime, order: ASC}) {\n          nodes {\n              ...EventFragment\n          }\n      }\n  }\n  `)\n\n  // Already started by start time, but if two events start at the same time, we want to sort then by the end time (if provided).\n  const nodesSorted = allMarkdownRemark.nodes.sort((event1, event2) => {\n    const range1 = event1.frontmatter.dateTimeRange\n    const range2 = event2.frontmatter.dateTimeRange\n    const start1 = new Date(range1.startDateTime)\n    const start2 = new Date(range2.startDateTime)\n\n    // Only need to do anything if they start at the same time\n    if (areSameMinute(start1, start2)) {\n      // Four cases, for each combination of each providing or not providing an end time.\n      // We'll deal with them all.\n      if (range1.provideEnd) {\n        const end1 = new Date(range1.endDateTime)\n\n        if (range2.provideEnd) {\n          const end2 = new Date(range2.endDateTime)\n          // Both ends provided, so sort by end date\n          return end1 - end2\n        } else {\n          // Range 2 has no defined end time, so ends first\n          return 1\n        }\n      } else {\n        if (range2.provideEnd) {\n          // Range 1 has no defined end time, so ends first\n          return -1\n        } else {\n          // Neither have a defined end, so they occur at the same time\n          return 0\n        }\n      }\n    } else {\n      // Leave in current order\n      return 0\n    }\n  })\n\n  return nodesSorted\n}\n"],"sourceRoot":""}