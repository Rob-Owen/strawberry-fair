{"version":3,"sources":["webpack:///./node_modules/core-js/modules/es7.object.entries.js","webpack:///./src/components/MainTileWithTwoStackedSideTiles.jsx","webpack:///./src/components/NewsArticleSnapshots.jsx","webpack:///./src/components/NewsMenu.jsx","webpack:///./src/templates/news-time-interval-overview.jsx"],"names":["$export","$entries","S","entries","it","MainTileWithTwoStackedSideTiles","mainTile","sideTopTile","sideBottomTile","className","displayStyle","day","month","year","NewsArticleSnapshot","newsArticles","publicationDate","Date","node","frontmatter","date","imageInfo","_","get","image","to","fields","slug","PreviewCompatibleImage","style","width","title","toLocaleDateString","content","shortExcerpt","longExcerpt","NewsArticleSnapshots","newsArticleSnapshots","map","key","NewsMenu","menuEntries","newsArticle","filter","nYears","today","getFullYear","isDateInLastNYears","forEach","getMonth","undefined","includes","push","getMenuEntries","Object","sort","year1","months","MonthItemsForYear","Fragment","monthName","monthNumber","NewsTimeIntervalOverview","firstDay","lastDay","firstDate","firstYear","firstMonth","lastDate","selectedNewsArticles","article","firstDayDate","lastDayDate","articleDate","getNewsArticlesInTimeInterval","breadcrumbs","breadcrumbLinks","getDate","isYearInterval","firstPureMonth","lastPureMonth","setMonth","getTime","isMonthInterval","console","log","NewsArchiveBreadcrumbs","dateTime","html","substring","breadcrumb","index","site","data","pageContext","allMarkdownRemark","edges","query"],"mappings":"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","file":"component---src-templates-news-time-interval-overview-jsx-c4ed98ce8f092b377902.js","sourcesContent":["// https://github.com/tc39/proposal-object-values-entries\nvar $export = require('./_export');\nvar $entries = require('./_object-to-array')(true);\n\n$export($export.S, 'Object', {\n  entries: function entries(it) {\n    return $entries(it);\n  }\n});\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst MainTileWithTwoStackedSideTiles = ({mainTile, sideTopTile, sideBottomTile}) => (\r\n  <div className=\"tile is-ancestor\">\r\n    <div className=\"tile is-parent\">\r\n      <div className=\"tile is-child box main-box\">\r\n        {mainTile}\r\n      </div>\r\n    </div>\r\n    <div className=\"tile is-4 is-vertical is-parent small-box\">\r\n      <div className=\"tile is-child box small-box\">\r\n        {sideTopTile}  \r\n      </div>\r\n      <div className=\"tile is-child box small-box\">\r\n        {sideBottomTile}  \r\n      </div>\r\n    </div>\r\n  </div>\r\n)\r\n\r\nMainTileWithTwoStackedSideTiles.propTypes = {\r\n  mainTile: PropTypes.element,\r\n  sideTopTile: PropTypes.element,\r\n  sideBottomTile: PropTypes.element\r\n}\r\n\r\nexport default MainTileWithTwoStackedSideTiles\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'gatsby'\r\nimport _ from 'lodash'\r\n\r\nimport PreviewCompatibleImage from './PreviewCompatibleImage'\r\nimport MainTileWithTwoStackedSideTiles from './MainTileWithTwoStackedSideTiles'\r\nimport { newsArticleValidator } from './validators'\r\nimport { HTMLContent } from './Content'\r\n\r\n//display style of the event date\r\nexport const displayStyle = {\r\n  day: \"numeric\",\r\n  month: \"long\",\r\n  year: \"numeric\"\r\n}\r\n\r\nexport const NewsArticleSnapshot = ({newsArticles}) => {\r\n  const publicationDate = new Date(newsArticles.node.frontmatter.date)\r\n\r\n  const imageInfo = _.get(\r\n    newsArticles.node.frontmatter.image,\r\n    'srcNode.childImageSharp.fixedAspect',\r\n    newsArticles.node.frontmatter.image\r\n  )\r\n  const imageWrapperStyle = {\r\n    width: \"100%\"\r\n  }\r\n\r\n  return (\r\n    <article className=\"news-preview\">\r\n      <Link to={newsArticles.node.fields.slug}>\r\n        <PreviewCompatibleImage imageInfo={imageInfo} style={imageWrapperStyle} />\r\n        <h2 className=\"title is-5 news-snapshot-title\">{newsArticles.node.frontmatter.title}</h2>\r\n      </Link>\r\n      <h3 className=\"subtitle is-7\">{publicationDate.toLocaleDateString(\"en-GB\", displayStyle)}</h3>\r\n      <HTMLContent content={newsArticles.node.shortExcerpt} className=\"news-excerpt news-excerpt-short\" />\r\n      <HTMLContent content={newsArticles.node.longExcerpt} className=\"news-excerpt news-excerpt-long\" />\r\n  </article>\r\n  )\r\n}\r\n\r\nNewsArticleSnapshot.propTypes = {\r\n  newsArticles: newsArticleValidator\r\n}\r\n\r\nconst NewsArticleSnapshots = ({newsArticles}) => {\r\n  const newsArticleSnapshots = newsArticles.map(newsArticles => \r\n    <NewsArticleSnapshot \r\n      newsArticles={newsArticles}\r\n      key={newsArticles.node.fields.slug}\r\n    />\r\n  )\r\n\r\n  return (\r\n    <MainTileWithTwoStackedSideTiles \r\n      mainTile={newsArticleSnapshots[0]}\r\n      sideTopTile={newsArticleSnapshots[1]}\r\n      sideBottomTile={newsArticleSnapshots[2]}\r\n    />\r\n  )\r\n}\r\n\r\nNewsArticleSnapshots.propTypes = {\r\n  newsArticles: PropTypes.arrayOf(newsArticleValidator)\r\n}\r\n\r\nexport default NewsArticleSnapshots","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'gatsby'\r\n\r\nimport NewsArticleSnapshots from '../components/NewsArticleSnapshots'\r\n\r\nconst NewsMenu = ({newsArticles}) => {\r\n    const menuEntries = getMenuEntries(newsArticles)\r\n    return (\r\n        <nav className=\"menu\">\r\n            <h1 className = \"subtitle\">\r\n                Archive\r\n            </h1>\r\n            {Object.entries(menuEntries)\r\n                .sort(([year1], [year2]) => year2 - year1)\r\n                .map(([year, months]) => <MonthItemsForYear key={year} year={year} months={months}/> )}\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default NewsMenu\r\n\r\nconst MonthItemsForYear = ({year, months}) => (\r\n    <React.Fragment>\r\n        <Link to ={`/news/${year}`} className=\"menu-label\">{year}</Link>\r\n        <ul className=\"menu-list\">\r\n            {months.sort().map(month => (\r\n                <li key={month}>\r\n                    <Link to={`/news/${year}/${month + 1}`}>\r\n                        {monthName(month)}\r\n                    </Link>\r\n                </li>\r\n            ))}\r\n        </ul>\r\n    </React.Fragment>\r\n)\r\n\r\n\r\nexport function monthName(monthNumber) {\r\n    const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n        \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\r\n    return monthNames[monthNumber]\r\n}\r\n\r\nfunction getMenuEntries(newsArticles) {\r\n    let menuEntries = {}\r\n\r\n    newsArticles\r\n        .map(newsArticle => new Date(newsArticle.node.frontmatter.date))\r\n        .filter(date => isDateInLastNYears(date, 3))\r\n        .forEach(date => {\r\n            const year = date.getFullYear()\r\n            const month = date.getMonth()\r\n            if (menuEntries[year] === undefined) {\r\n                menuEntries[year] = []\r\n            }\r\n            \r\n            if(!menuEntries[year].includes(month)) {\r\n                menuEntries[year].push(month)\r\n            }\r\n        })\r\n    \r\n    return menuEntries\r\n}\r\n\r\nfunction isDateInLastNYears(date, nYears) {\r\n    // Is the date 'date' within the last n years of today?\r\n    const today = new Date()\r\n    return date.getFullYear() >= today.getFullYear() - nYears + 1\r\n}\r\n\r\nNewsMenu.propTypes = {\r\n    newsArticles: NewsArticleSnapshots.propTypes.newsArticles\r\n}\r\n\r\nMonthItemsForYear.propTypes = {\r\n    year: PropTypes.string,\r\n    months: PropTypes.arrayOf(PropTypes.number)\r\n}\r\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { graphql, Link } from 'gatsby'\nimport { HTMLContent } from '../components/Content'\nimport { site } from '../util/templating'\nimport NewsMenu, { monthName } from '../components/NewsMenu.jsx'\nimport PreviewCompatibleImage from '../components/PreviewCompatibleImage'\nimport NewsArticleSnapshots from '../components/NewsArticleSnapshots'\n\n// This is used by the website and for CMS previews\nexport const NewsTimeIntervalOverview = ({newsArticles, firstDay, lastDay}) => {\n  const firstDate = new Date(firstDay)\n  const firstYear = firstDate.getFullYear()\n  const firstMonth = firstDate.getMonth()\n  const lastDate = new Date(lastDay)\n  const selectedNewsArticles = getNewsArticlesInTimeInterval(newsArticles, firstDate, lastDate)\n  const breadcrumbs = ['News']\n  const breadcrumbLinks = ['/news']\n\n  if (isYearInterval(firstDate, lastDate)) {\n    breadcrumbs.push(firstYear)\n    breadcrumbLinks.push(`/news/${firstYear}`)\n  } else if (isMonthInterval(firstDate, lastDate)) {\n    breadcrumbs.push(firstYear)\n    breadcrumbs.push(monthName(firstMonth))\n    breadcrumbLinks.push(`/news/${firstYear}`)\n    breadcrumbLinks.push(`/news/${firstYear}/${firstMonth + 1}`)\n  } else {\n    console.log(\"Unexpected date interval passed to page constructor.\")\n  }\n\n  return (\n    <React.Fragment>\n      <NewsArchiveBreadcrumbs breadcrumbs={breadcrumbs} breadcrumbLinks={breadcrumbLinks} />\n      <hr />\n      <div className=\"columns\">\n        <div className=\"column is-four-fifths\">\n          <div className=\"panel\">\n            {selectedNewsArticles.map(article => (\n              <Link to={article.node.fields.slug} key={article.node.fields.slug} className=\"panel-block\">\n                <article className=\"media\">\n                  <figure className=\"media-left\">\n                    <div className=\"image is-64x64\">\n                      <PreviewCompatibleImage imageInfo={article.node.frontmatter.image}/>\n                    </div>\n                  </figure>\n                  <div className=\"media-content\">\n                    <h1 className=\"has-text-primary\">{article.node.frontmatter.title}</h1>\n                    <time className=\"has-text-secondary\" dateTime={article.node.frontmatter.date}>{article.node.frontmatter.date}</time>\n                    <HTMLContent content = {article.node.html.substring(0,360)+\" ...\"}/>\n                  </div>\n                </article>\n              </Link>\n            ))}\n          </div>\n        </div>\n        <div className=\"column\">\n          <NewsMenu newsArticles={newsArticles}/>\n        </div>          \n      </div>\n    </React.Fragment>\n  )\n}\n\nconst NewsArchiveBreadcrumbs = ({breadcrumbs, breadcrumbLinks}) => {\n  return (\n    <nav className=\"breadcrumb is-large\">\n      <ul>\n        {breadcrumbs.map((breadcrumb, index) => (<li key={breadcrumb}><Link to={breadcrumbLinks[index]}>{breadcrumb}</Link></li>))}\n      </ul>\n    </nav>\n  )\n}\n\nexport default site(NewsTimeIntervalOverview, (data, pageContext) => {\n  return {\n    newsArticles: data.allMarkdownRemark.edges,\n    title: pageContext && pageContext.title ? pageContext.title : 'News Archive'\n  }\n})\n\nexport const query = graphql`\nquery newsMonthOverviewTemplate{\n  allMarkdownRemark(filter: {frontmatter: {templateKey: {eq: \"news-article\"}}}, sort: {fields: frontmatter___date, order: DESC}) {\n      edges {\n        node {\n          ...NewsFragment\n        }\n      }\n    }\n  }\n`\nfunction getNewsArticlesInTimeInterval(newsArticles, firstDay, lastDay) {\n  return newsArticles.filter(article => isInTimeInterval(firstDay, lastDay, new Date(article.node.frontmatter.date)))\n}\n\nfunction isInTimeInterval(firstDayDate, lastDayDate, articleDate) {\n  return firstDayDate<= articleDate && articleDate < lastDayDate\n}\n\n// Checks whether the given interval is from 01 Jan (year) to 01 Jan (year + 1)\nfunction isYearInterval(firstDate, lastDate) {\n  return (\n    firstDate.getFullYear() + 1 === lastDate.getFullYear() &&\n    firstDate.getMonth() === 0 &&\n    lastDate.getMonth() === 0 &&\n    firstDate.getDate() === 1 &&\n    lastDate.getDate() === 1\n  )\n}\n\n// Checks whether the given interval is from 01 (month) (year) to 01 (month + 1) (year)\nfunction isMonthInterval(firstDate, lastDate) {\n  const firstPureMonth = new Date(firstDate.getFullYear(), firstDate.getMonth())\n  const lastPureMonth = new Date(lastDate.getFullYear(), lastDate.getMonth())\n  firstPureMonth.setMonth(firstPureMonth.getMonth() + 1)\n\n  return (\n    firstPureMonth.getTime() === lastPureMonth.getTime() &&  // Have to do it this way to ensure December works\n    firstDate.getDate() === 1 &&\n    lastDate.getDate() === 1\n  )\n}\n\nNewsTimeIntervalOverview.propTypes = {\n  newsArticles: NewsArticleSnapshots.propTypes.newsArticles,\n  firstDay: PropTypes.string.isRequired,\n  lastDay: PropTypes.string.isRequired\n}\n\nNewsArchiveBreadcrumbs.propTypes = {\n  breadcrumbs: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.number])),\n  breadcrumbLinks: PropTypes.arrayOf(PropTypes.string)\n}\n"],"sourceRoot":""}