{"version":3,"sources":["webpack:///./src/components/FormFrame.jsx","webpack:///./src/templates/form.jsx","webpack:///./node_modules/is-url/index.js"],"names":["FormFrame","form","isPublic","link","isUrl","includes","src","width","height","urlSearch","match","url","heightSearch","FormPage","content","BodyComponent","contentComponent","HTMLContent","Fragment","query","site","module","exports","string","protocolAndDomainRE","everythingAfterProtocol","localhostDomainRE","test","nonLocalhostDomainRE"],"mappings":"gNAMaA,EAAY,SAAC,GAA8B,IAAD,IAA5BC,KAAOC,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,KACxC,GAAID,GAAYC,EAAM,CAElB,GAAIC,IAAMD,IAASA,EAAKE,SAAS,0BAC7B,OACI,4BAAQC,IAAKH,EAAMI,MAAM,OAAOC,OAP3B,OAYb,IAAMC,EAAYN,EAAKO,MAAM,eAE7B,GAAID,GAAaA,EAAU,GAAI,CAC3B,IAAME,EAAMF,EAAU,GAEtB,GAAIL,IAAMO,IAAQA,EAAIN,SAAS,0BAA2B,CACtD,IAAMO,EAAeT,EAAKO,MAAM,6BAC1BF,EAAUI,GAAgBA,EAAa,GAAMA,EAAa,GAnB3D,KAqBL,OACI,4BAAQN,IAAKK,EAAKJ,MAAM,OAAOC,OAAQA,GAAvC,cAMhB,OAAO,M,YChCX,+EASO,IAAMK,EAAW,SAAC,GAAuC,IAAtCZ,EAAqC,EAArCA,KAAMa,EAA+B,EAA/BA,QACxBC,EADuD,EAAtBC,kBACGC,IAE1C,OACE,kBAAC,IAAMC,SAAP,KACE,kBAACH,EAAD,CAAeD,QAASA,IACxB,kBAAC,EAAD,CAAWb,KAAMA,MAaVkB,GAFEC,sBAAKP,GAEF,e,qBC5BlB,EAAQ,QAKRQ,EAAOC,QAiBP,SAAeC,GACb,GAAsB,iBAAXA,EACT,OAAO,EAGT,IAAIb,EAAQa,EAAOb,MAAMc,GAEzB,IAAKd,EACH,OAAO,EAGT,IAAIe,EAA0Bf,EAAM,GAEpC,IAAKe,EACH,OAAO,EAGT,GAAIC,EAAkBC,KAAKF,IAA4BG,EAAqBD,KAAKF,GAC/E,OAAO,EAGT,OAAO,GA/BT,IAAID,EAAsB,uBACtBE,EAAoB,sCACpBE,EAAuB","file":"component---src-templates-form-jsx-eb0f6459c8af8300a73a.js","sourcesContent":["import React from 'react'\nimport { formValidator } from './validators'\nimport isUrl from 'is-url'\n\nconst IFRAMEHEIGHT = 1427 //default value for the height of the form\n\nexport const FormFrame = ({form: {isPublic, link}}) => {\n    if (isPublic && link) {\n        // Link as url\n        if (isUrl(link) && link.includes(\"docs.google.com/forms/\")) {\n            return (\n                <iframe src={link} width=\"100%\" height={IFRAMEHEIGHT} />\n            )\n        }\n      \n        // Link as iFrame\n        const urlSearch = link.match(/src=\"(\\S*)\"/)\n  \n        if (urlSearch && urlSearch[1]) {\n            const url = urlSearch[1]\n  \n            if (isUrl(url) && url.includes(\"docs.google.com/forms/\")) {\n                const heightSearch = link.match(/\\sheight=\"([0-9]+)?\"[\\s>]/)\n                const height = (heightSearch && heightSearch[1]) ? heightSearch[1] : IFRAMEHEIGHT\n  \n                return (\n                    <iframe src={url} width=\"100%\" height={height}>Loadingâ€¦</iframe>\n                )\n            }\n        }\n    }\n\n    return null\n}\n  \nFormFrame.propTypes = { form: formValidator }","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { graphql } from 'gatsby'\r\n\r\nimport { HTMLContent } from '../components/Content'\r\nimport { FormFrame } from '../components/FormFrame'\r\nimport { site } from '../util/templating'\r\n\r\n// This is used by the website and for CMS previews\r\nexport const FormPage = ({form, content, contentComponent}) => {\r\n  const BodyComponent = contentComponent || HTMLContent\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <BodyComponent content={content} />\r\n      <FormFrame form={form} />\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nFormPage.propTypes = {\r\n  form: FormFrame.propTypes.form,\r\n  content: PropTypes.string.isRequired,\r\n  contentComponent: PropTypes.elementType\r\n}\r\n\r\nexport default site(FormPage)\r\n\r\nexport const query = graphql`\r\nquery formPageTemplate($id: String!) {\r\n    markdownRemark(id: { eq: $id }) {\r\n      frontmatter {\r\n        title\r\n        ...FormFragment\r\n      }\r\n      html\r\n    }\r\n    heroData: allMarkdownRemark(filter: {id: {eq: $id}}) {\r\n      ...HeroFragment\r\n    }\r\n  }\r\n`\r\n","require(\"core-js/modules/es6.regexp.match\");\n\n/**\n * Expose `isUrl`.\n */\nmodule.exports = isUrl;\n/**\n * RegExps.\n * A URL must match #1 and then at least one of #2/#3.\n * Use two levels of REs to avoid REDOS.\n */\n\nvar protocolAndDomainRE = /^(?:\\w+:)?\\/\\/(\\S+)$/;\nvar localhostDomainRE = /^localhost[\\:?\\d]*(?:[^\\:?\\d]\\S*)?$/;\nvar nonLocalhostDomainRE = /^[^\\s\\.]+\\.\\S{2,}$/;\n/**\n * Loosely validate a URL `string`.\n *\n * @param {String} string\n * @return {Boolean}\n */\n\nfunction isUrl(string) {\n  if (typeof string !== 'string') {\n    return false;\n  }\n\n  var match = string.match(protocolAndDomainRE);\n\n  if (!match) {\n    return false;\n  }\n\n  var everythingAfterProtocol = match[1];\n\n  if (!everythingAfterProtocol) {\n    return false;\n  }\n\n  if (localhostDomainRE.test(everythingAfterProtocol) || nonLocalhostDomainRE.test(everythingAfterProtocol)) {\n    return true;\n  }\n\n  return false;\n}"],"sourceRoot":""}